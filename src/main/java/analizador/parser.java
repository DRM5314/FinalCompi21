
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import cic.ManejadorEstructura;
import lexema.Lexema;
import scripting.Manejador;
import variable.Variable;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\346\000\002\002\004\000\002\102\004\000\002\102" +
    "\003\000\002\103\005\000\002\103\005\000\002\103\005" +
    "\000\002\104\004\000\002\104\003\000\002\105\005\000" +
    "\002\105\005\000\002\105\003\000\002\060\002\000\002" +
    "\060\006\000\002\060\004\000\002\060\004\000\002\060" +
    "\004\000\002\060\004\000\002\060\005\000\002\057\005" +
    "\000\002\057\005\000\002\061\002\000\002\061\007\000" +
    "\002\061\004\000\002\061\004\000\002\061\005\000\002" +
    "\062\002\000\002\062\007\000\002\062\004\000\002\062" +
    "\004\000\002\062\005\000\002\066\002\000\002\066\006" +
    "\000\002\066\004\000\002\066\004\000\002\066\004\000" +
    "\002\066\005\000\002\065\003\000\002\065\005\000\002" +
    "\070\002\000\002\070\006\000\002\070\004\000\002\070" +
    "\004\000\002\070\004\000\002\070\005\000\002\067\005" +
    "\000\002\067\005\000\002\067\005\000\002\067\003\000" +
    "\002\072\002\000\002\072\006\000\002\072\004\000\002" +
    "\072\004\000\002\072\004\000\002\072\005\000\002\071" +
    "\005\000\002\071\003\000\002\074\002\000\002\074\006" +
    "\000\002\074\004\000\002\074\004\000\002\074\004\000" +
    "\002\074\005\000\002\073\005\000\002\073\005\000\002" +
    "\073\005\000\002\073\005\000\002\073\005\000\002\076" +
    "\002\000\002\076\006\000\002\076\004\000\002\076\004" +
    "\000\002\076\004\000\002\076\005\000\002\075\003\000" +
    "\002\075\005\000\002\075\005\000\002\077\002\000\002" +
    "\077\006\000\002\077\004\000\002\077\005\000\002\077" +
    "\004\000\002\077\005\000\002\100\003\000\002\101\003" +
    "\000\002\101\003\000\002\002\010\000\002\002\004\000" +
    "\002\002\005\000\002\016\006\000\002\003\004\000\002" +
    "\003\003\000\002\003\005\000\002\004\003\000\002\004" +
    "\003\000\002\005\007\000\002\017\005\000\002\006\004" +
    "\000\002\006\003\000\002\007\011\000\002\007\011\000" +
    "\002\007\005\000\002\007\004\000\002\007\004\000\002" +
    "\010\007\000\002\013\006\000\002\013\005\000\002\013" +
    "\006\000\002\011\005\000\002\011\004\000\002\012\011" +
    "\000\002\012\010\000\002\012\011\000\002\012\007\000" +
    "\002\012\007\000\002\012\005\000\002\012\004\000\002" +
    "\012\011\000\002\012\011\000\002\012\011\000\002\012" +
    "\010\000\002\012\004\000\002\012\005\000\002\012\005" +
    "\000\002\106\002\000\002\106\003\000\002\020\005\000" +
    "\002\013\004\000\002\013\003\000\002\014\012\000\002" +
    "\015\005\000\002\032\004\000\002\107\002\000\002\030" +
    "\011\000\002\021\003\000\002\021\004\000\002\021\006" +
    "\000\002\021\004\000\002\110\002\000\002\031\011\000" +
    "\002\031\003\000\002\031\005\000\002\022\003\000\002" +
    "\022\004\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\023\004\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\004\000\002\023\004\000" +
    "\002\023\004\000\002\023\007\000\002\055\005\000\002" +
    "\055\003\000\002\056\003\000\002\056\003\000\002\052" +
    "\005\000\002\053\005\000\002\054\006\000\002\043\004" +
    "\000\002\111\002\000\002\043\007\000\002\044\007\000" +
    "\002\112\002\000\002\045\011\000\002\113\002\000\002" +
    "\046\014\000\002\033\004\000\002\033\004\000\002\033" +
    "\004\000\002\033\004\000\002\033\005\000\002\033\004" +
    "\000\002\033\004\000\002\033\004\000\002\033\011\000" +
    "\002\050\005\000\002\051\005\000\002\037\003\000\002" +
    "\037\003\000\002\037\004\000\002\040\003\000\002\041" +
    "\005\000\002\041\006\000\002\042\006\000\002\024\002" +
    "\000\002\024\003\000\002\025\003\000\002\025\005\000" +
    "\002\025\005\000\002\026\003\000\002\027\002\000\002" +
    "\027\004\000\002\034\005\000\002\034\005\000\002\034" +
    "\004\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\004\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\003\000\002\036\003\000\002\036\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\006\000\002\035" +
    "\006\000\002\035\006\000\002\035\006\000\002\035\006" +
    "\000\002\035\005\000\002\035\005\000\002\035\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0214\000\006\003\006\004\005\001\002\000\006\003" +
    "\015\004\016\001\002\000\004\015\u0200\001\002\000\006" +
    "\005\012\007\011\001\002\000\004\002\010\001\002\000" +
    "\004\002\001\001\002\000\004\002\uffab\001\002\000\006" +
    "\003\015\004\016\001\002\000\006\003\u01e0\004\u01df\001" +
    "\002\000\006\002\uffa4\004\uffa4\001\002\000\004\005\u01dc" +
    "\001\002\000\006\016\024\022\023\001\002\000\006\002" +
    "\uffa5\004\uffa5\001\002\000\006\002\uffa7\004\uffa7\001\002" +
    "\000\006\002\uffaa\004\016\001\002\000\006\002\uffa8\004" +
    "\uffa8\001\002\000\010\003\030\005\uffe8\007\026\001\002" +
    "\000\004\005\025\001\002\000\006\003\uffa2\004\uffa2\001" +
    "\002\000\004\041\u01d8\001\002\000\004\005\u01d5\001\002" +
    "\000\010\005\032\010\031\014\033\001\002\000\004\005" +
    "\uffe5\001\002\000\004\004\035\001\002\000\004\005\uffe6" +
    "\001\002\000\006\004\122\005\uffe4\001\002\000\032\003" +
    "\045\023\052\024\050\025\042\026\040\030\037\031\041" +
    "\032\043\033\047\034\054\035\036\036\053\001\002\000" +
    "\010\003\055\005\uffb5\007\uffb5\001\002\000\010\003\u01c0" +
    "\005\uffd1\007\uffd1\001\002\000\010\003\055\005\uffb5\007" +
    "\uffb5\001\002\000\010\003\u01a3\005\uffc9\007\uffc9\001\002" +
    "\000\010\003\u0187\005\uffdb\007\uffdb\001\002\000\004\005" +
    "\u0186\001\002\000\012\002\uff95\004\uff95\005\uff95\007\uff95" +
    "\001\002\000\010\004\035\005\u0183\010\u0181\001\002\000" +
    "\006\003\u016b\004\u016a\001\002\000\010\003\u0152\005\uffbe" +
    "\007\uffbe\001\002\000\010\003\u0140\005\uffe3\007\uffe3\001" +
    "\002\000\004\004\035\001\002\000\010\003\055\005\uffb5" +
    "\007\uffb5\001\002\000\004\005\125\001\002\000\010\003" +
    "\055\005\uffb5\007\uffb5\001\002\000\012\005\117\007\116" +
    "\010\115\014\120\001\002\000\006\005\060\007\057\001" +
    "\002\000\014\037\076\042\070\044\077\045\072\046\073" +
    "\001\002\000\006\004\uff86\070\062\001\002\000\004\004" +
    "\063\001\002\000\004\004\uff85\001\002\000\004\006\067" +
    "\001\002\000\004\034\065\001\002\000\004\005\066\001" +
    "\002\000\012\002\uff8c\004\uff8c\005\uff8c\007\uff8c\001\002" +
    "\000\034\016\uff7f\017\uff7f\020\uff7f\022\uff7f\023\uff7f\024" +
    "\uff7f\025\uff7f\026\uff7f\030\uff7f\033\uff7f\034\uff7f\035\uff7f" +
    "\036\uff7f\001\002\000\004\014\113\001\002\000\022\005" +
    "\ufff7\007\ufff7\010\ufff7\037\ufff7\042\ufff7\044\ufff7\045\ufff7" +
    "\046\ufff7\001\002\000\004\014\111\001\002\000\004\014" +
    "\107\001\002\000\004\010\106\001\002\000\022\005\uffaf" +
    "\007\uffaf\010\uffaf\037\076\042\070\044\077\045\072\046" +
    "\073\001\002\000\004\014\103\001\002\000\004\014\101" +
    "\001\002\000\022\005\ufffa\007\ufffa\010\ufffa\037\ufffa\042" +
    "\ufffa\044\ufffa\045\ufffa\046\ufffa\001\002\000\004\063\102" +
    "\001\002\000\022\005\ufffe\007\ufffe\010\ufffe\037\ufffe\042" +
    "\ufffe\044\ufffe\045\ufffe\046\ufffe\001\002\000\004\071\104" +
    "\001\002\000\022\005\ufff9\007\ufff9\010\ufff9\037\ufff9\042" +
    "\ufff9\044\ufff9\045\ufff9\046\ufff9\001\002\000\022\005\ufffb" +
    "\007\ufffb\010\ufffb\037\ufffb\042\ufffb\044\ufffb\045\ufffb\046" +
    "\ufffb\001\002\000\006\005\uffb4\007\uffb4\001\002\000\004" +
    "\065\110\001\002\000\022\005\ufffc\007\ufffc\010\ufffc\037" +
    "\ufffc\042\ufffc\044\ufffc\045\ufffc\046\ufffc\001\002\000\004" +
    "\064\112\001\002\000\022\005\ufffd\007\ufffd\010\ufffd\037" +
    "\ufffd\042\ufffd\044\ufffd\045\ufffd\046\ufffd\001\002\000\004" +
    "\043\114\001\002\000\022\005\ufff8\007\ufff8\010\ufff8\037" +
    "\ufff8\042\ufff8\044\ufff8\045\ufff8\046\ufff8\001\002\000\006" +
    "\005\uffb1\007\uffb1\001\002\000\014\037\076\042\070\044" +
    "\077\045\072\046\073\001\002\000\004\004\035\001\002" +
    "\000\006\005\uffb3\007\uffb3\001\002\000\010\004\122\005" +
    "\uffb0\007\uffb0\001\002\000\032\003\045\023\052\024\050" +
    "\025\042\026\040\030\037\031\041\032\043\033\047\034" +
    "\054\035\036\036\053\001\002\000\012\002\uff96\004\uff96" +
    "\005\uff96\007\uff96\001\002\000\006\005\uffb2\007\uffb2\001" +
    "\002\000\010\003\131\103\132\104\130\001\002\000\016" +
    "\003\uff7c\004\uff7c\012\uff7c\103\uff7c\104\uff7c\144\uff7c\001" +
    "\002\000\016\003\uff76\004\uff76\012\uff76\103\uff76\104\uff76" +
    "\144\uff76\001\002\000\004\011\u012f\001\002\000\010\007" +
    "\u012b\010\141\144\u012c\001\002\000\004\011\143\001\002" +
    "\000\012\003\135\004\063\103\132\104\130\001\002\000" +
    "\016\003\uff7b\004\uff7b\012\uff7b\103\uff7b\104\uff7b\144\uff7b" +
    "\001\002\000\004\010\141\001\002\000\004\036\137\001" +
    "\002\000\004\005\140\001\002\000\012\002\uff8a\004\uff8a" +
    "\005\uff8a\007\uff8a\001\002\000\010\003\131\103\132\104" +
    "\130\001\002\000\016\003\uff75\004\uff75\012\uff75\103\uff75" +
    "\104\uff75\144\uff75\001\002\000\004\012\144\001\002\000" +
    "\004\007\uff78\001\002\000\004\007\146\001\002\000\032" +
    "\003\170\014\154\100\152\101\167\114\171\115\147\116" +
    "\166\117\165\121\151\123\157\126\174\130\155\001\002" +
    "\000\004\011\u0129\001\002\000\004\144\u0128\001\002\000" +
    "\004\146\u0126\001\002\000\010\003\uff46\101\uff46\102\u0119" +
    "\001\002\000\022\003\311\014\154\100\152\101\167\114" +
    "\171\115\147\116\166\121\151\001\002\000\004\003\u0112" +
    "\001\002\000\004\011\u010c\001\002\000\006\012\uff4c\144" +
    "\uff4c\001\002\000\004\011\u0108\001\002\000\006\012\uff4a" +
    "\144\uff4a\001\002\000\042\003\uff74\010\uff74\012\uff74\013" +
    "\uff74\014\uff74\100\uff74\101\uff74\114\uff74\115\uff74\116\uff74" +
    "\117\uff74\123\uff74\126\uff74\130\uff74\144\uff74\145\uff74\001" +
    "\002\000\032\003\211\010\u0107\014\154\100\152\101\167" +
    "\114\171\115\147\116\166\117\165\123\157\126\174\130" +
    "\155\001\002\000\042\003\uff6e\010\uff6e\012\uff6e\013\uff6e" +
    "\014\uff6e\100\uff6e\101\uff6e\114\uff6e\115\uff6e\116\uff6e\117" +
    "\uff6e\123\uff6e\126\uff6e\130\uff6e\144\uff6e\145\uff6e\001\002" +
    "\000\006\012\uff4d\144\uff4d\001\002\000\004\011\376\001" +
    "\002\000\004\011\374\001\002\000\004\014\372\001\002" +
    "\000\006\014\367\144\366\001\002\000\004\011\363\001" +
    "\002\000\004\144\362\001\002\000\042\003\uff6d\010\uff6d" +
    "\012\uff6d\013\uff6d\014\uff6d\100\uff6d\101\uff6d\114\uff6d\115" +
    "\uff6d\116\uff6d\117\uff6d\123\uff6d\126\uff6d\130\uff6d\144\uff6d" +
    "\145\uff6d\001\002\000\004\011\210\001\002\000\004\144" +
    "\207\001\002\000\004\144\206\001\002\000\004\003\201" +
    "\001\002\000\042\003\uff6c\010\uff6c\012\uff6c\013\uff6c\014" +
    "\uff6c\100\uff6c\101\uff6c\114\uff6c\115\uff6c\116\uff6c\117\uff6c" +
    "\123\uff6c\126\uff6c\130\uff6c\144\uff6c\145\uff6c\001\002\000" +
    "\004\145\203\001\002\000\042\003\uff71\010\uff71\012\uff71" +
    "\013\uff71\014\uff71\100\uff71\101\uff71\114\uff71\115\uff71\116" +
    "\uff71\117\uff71\123\uff71\126\uff71\130\uff71\144\uff71\145\uff71" +
    "\001\002\000\004\147\204\001\002\000\004\122\205\001" +
    "\002\000\044\003\uff4e\010\uff4e\012\uff4e\013\uff4e\014\uff4e" +
    "\100\uff4e\101\uff4e\114\uff4e\115\uff4e\116\uff4e\117\uff4e\123" +
    "\uff4e\125\uff4e\126\uff4e\130\uff4e\144\uff4e\145\uff4e\001\002" +
    "\000\042\003\uff6a\010\uff6a\012\uff6a\013\uff6a\014\uff6a\100" +
    "\uff6a\101\uff6a\114\uff6a\115\uff6a\116\uff6a\117\uff6a\123\uff6a" +
    "\126\uff6a\130\uff6a\144\uff6a\145\uff6a\001\002\000\042\003" +
    "\uff6b\010\uff6b\012\uff6b\013\uff6b\014\uff6b\100\uff6b\101\uff6b" +
    "\114\uff6b\115\uff6b\116\uff6b\117\uff6b\123\uff6b\126\uff6b\130" +
    "\uff6b\144\uff6b\145\uff6b\001\002\000\012\003\211\014\154" +
    "\100\152\101\167\001\002\000\004\144\316\001\002\000" +
    "\004\012\213\001\002\000\004\127\214\001\002\000\004" +
    "\011\215\001\002\000\046\011\220\101\231\105\233\106" +
    "\221\107\227\110\216\111\241\112\237\113\230\120\223" +
    "\132\224\133\235\134\217\135\232\136\240\137\225\140" +
    "\226\152\222\001\002\000\004\011\357\001\002\000\076" +
    "\003\uff27\004\uff27\005\uff27\006\uff27\010\uff27\012\uff27\013" +
    "\uff27\014\uff27\074\uff27\075\uff27\076\uff27\077\uff27\100\uff27" +
    "\101\uff27\114\uff27\115\uff27\116\uff27\117\uff27\123\uff27\126" +
    "\uff27\130\uff27\132\uff27\136\uff27\141\uff27\142\uff27\143\uff27" +
    "\144\uff27\145\uff27\150\uff27\151\uff27\001\002\000\050\003" +
    "\353\011\220\101\231\105\233\106\221\107\227\110\216" +
    "\111\241\112\237\113\230\120\223\132\224\133\235\134" +
    "\217\135\232\136\240\137\225\140\226\152\222\001\002" +
    "\000\004\011\350\001\002\000\046\011\220\101\231\105" +
    "\233\106\221\107\227\110\216\111\241\112\237\113\230" +
    "\120\223\132\224\133\235\134\217\135\232\136\240\137" +
    "\225\140\226\152\222\001\002\000\004\011\344\001\002" +
    "\000\076\003\uff28\004\uff28\005\uff28\006\uff28\010\uff28\012" +
    "\uff28\013\uff28\014\uff28\074\uff28\075\uff28\076\uff28\077\uff28" +
    "\100\uff28\101\uff28\114\uff28\115\uff28\116\uff28\117\uff28\123" +
    "\uff28\126\uff28\130\uff28\132\uff28\136\uff28\141\uff28\142\uff28" +
    "\143\uff28\144\uff28\145\uff28\150\uff28\151\uff28\001\002\000" +
    "\076\003\uff25\004\uff25\005\uff25\006\uff25\010\uff25\012\uff25" +
    "\013\uff25\014\uff25\074\uff25\075\uff25\076\uff25\077\uff25\100" +
    "\uff25\101\uff25\114\uff25\115\uff25\116\uff25\117\uff25\123\uff25" +
    "\126\uff25\130\uff25\132\uff25\136\uff25\141\uff25\142\uff25\143" +
    "\uff25\144\uff25\145\uff25\150\uff25\151\uff25\001\002\000\076" +
    "\003\uff26\004\uff26\005\uff26\006\uff26\010\uff26\012\uff26\013" +
    "\uff26\014\uff26\074\uff26\075\uff26\076\uff26\077\uff26\100\uff26" +
    "\101\uff26\114\uff26\115\uff26\116\uff26\117\uff26\123\uff26\126" +
    "\uff26\130\uff26\132\uff26\136\uff26\141\uff26\142\uff26\143\uff26" +
    "\144\uff26\145\uff26\150\uff26\151\uff26\001\002\000\004\011" +
    "\341\001\002\000\004\011\337\001\002\000\076\003\uff24" +
    "\004\uff24\005\uff24\006\uff24\010\uff24\012\uff24\013\uff24\014" +
    "\uff24\074\uff24\075\uff24\076\uff24\077\uff24\100\uff24\101\uff24" +
    "\114\uff24\115\uff24\116\uff24\117\uff24\123\uff24\126\uff24\130" +
    "\uff24\132\uff24\136\uff24\141\uff24\142\uff24\143\uff24\144\uff24" +
    "\145\uff24\150\uff24\151\uff24\001\002\000\076\003\uff2b\004" +
    "\uff2b\005\uff2b\006\uff2b\010\uff2b\012\uff2b\013\uff2b\014\uff2b" +
    "\074\uff2b\075\uff2b\076\uff2b\077\uff2b\100\uff2b\101\uff2b\114" +
    "\uff2b\115\uff2b\116\uff2b\117\uff2b\123\uff2b\126\uff2b\130\uff2b" +
    "\132\uff2b\136\uff2b\141\uff2b\142\uff2b\143\uff2b\144\uff2b\145" +
    "\uff2b\150\uff2b\151\uff2b\001\002\000\004\011\334\001\002" +
    "\000\076\003\uff2e\004\uff2e\005\uff2e\006\uff2e\010\uff2e\012" +
    "\uff2e\013\uff2e\014\uff2e\074\uff2e\075\uff2e\076\uff2e\077\uff2e" +
    "\100\uff2e\101\uff2e\114\uff2e\115\uff2e\116\uff2e\117\uff2e\123" +
    "\uff2e\126\uff2e\130\uff2e\132\uff2e\136\uff2e\141\uff2e\142\uff2e" +
    "\143\uff2e\144\uff2e\145\uff2e\150\uff2e\151\uff2e\001\002\000" +
    "\076\003\uff29\004\uff29\005\uff29\006\uff29\010\uff29\012\uff29" +
    "\013\uff29\014\uff29\074\uff29\075\uff29\076\uff29\077\uff29\100" +
    "\uff29\101\uff29\114\uff29\115\uff29\116\uff29\117\uff29\123\uff29" +
    "\126\uff29\130\uff29\132\uff29\136\uff29\141\uff29\142\uff29\143" +
    "\uff29\144\uff29\145\uff29\150\uff29\151\uff29\001\002\000\040" +
    "\004\255\005\245\006\256\012\302\074\247\075\261\076" +
    "\262\077\250\132\257\136\252\141\251\142\246\143\260" +
    "\150\254\151\263\001\002\000\004\011\300\001\002\000" +
    "\076\003\uff2a\004\uff2a\005\uff2a\006\uff2a\010\uff2a\012\uff2a" +
    "\013\uff2a\014\uff2a\074\uff2a\075\uff2a\076\uff2a\077\uff2a\100" +
    "\uff2a\101\uff2a\114\uff2a\115\uff2a\116\uff2a\117\uff2a\123\uff2a" +
    "\126\uff2a\130\uff2a\132\uff2a\136\uff2a\141\uff2a\142\uff2a\143" +
    "\uff2a\144\uff2a\145\uff2a\150\uff2a\151\uff2a\001\002\000\004" +
    "\011\242\001\002\000\046\011\220\101\231\105\233\106" +
    "\221\107\227\110\216\111\241\112\237\113\230\120\223" +
    "\132\224\133\235\134\217\135\232\136\240\137\225\140" +
    "\226\152\222\001\002\000\040\004\255\005\245\006\256" +
    "\012\253\074\247\075\261\076\262\077\250\132\257\136" +
    "\252\141\251\142\246\143\260\150\254\151\263\001\002" +
    "\000\076\003\uff3c\004\uff3c\005\uff3c\006\uff3c\010\uff3c\012" +
    "\uff3c\013\uff3c\014\uff3c\074\uff3c\075\uff3c\076\uff3c\077\uff3c" +
    "\100\uff3c\101\uff3c\114\uff3c\115\uff3c\116\uff3c\117\uff3c\123" +
    "\uff3c\126\uff3c\130\uff3c\132\uff3c\136\uff3c\141\uff3c\142\uff3c" +
    "\143\uff3c\144\uff3c\145\uff3c\150\uff3c\151\uff3c\001\002\000" +
    "\046\011\220\101\231\105\233\106\221\107\227\110\216" +
    "\111\241\112\237\113\230\120\223\132\224\133\235\134" +
    "\217\135\232\136\240\137\225\140\226\152\222\001\002" +
    "\000\046\011\220\101\231\105\233\106\221\107\227\110" +
    "\216\111\241\112\237\113\230\120\223\132\224\133\235" +
    "\134\217\135\232\136\240\137\225\140\226\152\222\001" +
    "\002\000\046\011\220\101\231\105\233\106\221\107\227" +
    "\110\216\111\241\112\237\113\230\120\223\132\224\133" +
    "\235\134\217\135\232\136\240\137\225\140\226\152\222" +
    "\001\002\000\046\011\220\101\231\105\233\106\221\107" +
    "\227\110\216\111\241\112\237\113\230\120\223\132\224" +
    "\133\235\134\217\135\232\136\240\137\225\140\226\152" +
    "\222\001\002\000\046\011\220\101\231\105\233\106\221" +
    "\107\227\110\216\111\241\112\237\113\230\120\223\132" +
    "\224\133\235\134\217\135\232\136\240\137\225\140\226" +
    "\152\222\001\002\000\076\003\uff2d\004\uff2d\005\uff2d\006" +
    "\uff2d\010\uff2d\012\uff2d\013\uff2d\014\uff2d\074\uff2d\075\uff2d" +
    "\076\uff2d\077\uff2d\100\uff2d\101\uff2d\114\uff2d\115\uff2d\116" +
    "\uff2d\117\uff2d\123\uff2d\126\uff2d\130\uff2d\132\uff2d\136\uff2d" +
    "\141\uff2d\142\uff2d\143\uff2d\144\uff2d\145\uff2d\150\uff2d\151" +
    "\uff2d\001\002\000\076\003\uff1f\004\uff1f\005\uff1f\006\uff1f" +
    "\010\uff1f\012\uff1f\013\uff1f\014\uff1f\074\uff1f\075\uff1f\076" +
    "\uff1f\077\uff1f\100\uff1f\101\uff1f\114\uff1f\115\uff1f\116\uff1f" +
    "\117\uff1f\123\uff1f\126\uff1f\130\uff1f\132\uff1f\136\uff1f\141" +
    "\uff1f\142\uff1f\143\uff1f\144\uff1f\145\uff1f\150\uff1f\151\uff1f" +
    "\001\002\000\046\011\220\101\231\105\233\106\221\107" +
    "\227\110\216\111\241\112\237\113\230\120\223\132\224" +
    "\133\235\134\217\135\232\136\240\137\225\140\226\152" +
    "\222\001\002\000\046\011\220\101\231\105\233\106\221" +
    "\107\227\110\216\111\241\112\237\113\230\120\223\132" +
    "\224\133\235\134\217\135\232\136\240\137\225\140\226" +
    "\152\222\001\002\000\046\011\220\101\231\105\233\106" +
    "\221\107\227\110\216\111\241\112\237\113\230\120\223" +
    "\132\224\133\235\134\217\135\232\136\240\137\225\140" +
    "\226\152\222\001\002\000\076\003\uff2c\004\uff2c\005\uff2c" +
    "\006\uff2c\010\uff2c\012\uff2c\013\uff2c\014\uff2c\074\uff2c\075" +
    "\uff2c\076\uff2c\077\uff2c\100\uff2c\101\uff2c\114\uff2c\115\uff2c" +
    "\116\uff2c\117\uff2c\123\uff2c\126\uff2c\130\uff2c\132\uff2c\136" +
    "\uff2c\141\uff2c\142\uff2c\143\uff2c\144\uff2c\145\uff2c\150\uff2c" +
    "\151\uff2c\001\002\000\046\011\220\101\231\105\233\106" +
    "\221\107\227\110\216\111\241\112\237\113\230\120\223" +
    "\132\224\133\235\134\217\135\232\136\240\137\225\140" +
    "\226\152\222\001\002\000\046\011\220\101\231\105\233" +
    "\106\221\107\227\110\216\111\241\112\237\113\230\120" +
    "\223\132\224\133\235\134\217\135\232\136\240\137\225" +
    "\140\226\152\222\001\002\000\046\011\220\101\231\105" +
    "\233\106\221\107\227\110\216\111\241\112\237\113\230" +
    "\120\223\132\224\133\235\134\217\135\232\136\240\137" +
    "\225\140\226\152\222\001\002\000\046\011\220\101\231" +
    "\105\233\106\221\107\227\110\216\111\241\112\237\113" +
    "\230\120\223\132\224\133\235\134\217\135\232\136\240" +
    "\137\225\140\226\152\222\001\002\000\076\003\uff38\004" +
    "\uff38\005\uff38\006\uff38\010\uff38\012\uff38\013\uff38\014\uff38" +
    "\074\uff38\075\uff38\076\uff38\077\uff38\100\uff38\101\uff38\114" +
    "\uff38\115\uff38\116\uff38\117\uff38\123\uff38\126\uff38\130\uff38" +
    "\132\uff38\136\uff38\141\uff38\142\uff38\143\uff38\144\uff38\145" +
    "\uff38\150\uff38\151\uff38\001\002\000\076\003\uff33\004\uff33" +
    "\005\uff33\006\uff33\010\uff33\012\uff33\013\uff33\014\uff33\074" +
    "\uff33\075\uff33\076\uff33\077\uff33\100\uff33\101\uff33\114\uff33" +
    "\115\uff33\116\uff33\117\uff33\123\uff33\126\uff33\130\uff33\132" +
    "\uff33\136\uff33\141\uff33\142\uff33\143\uff33\144\uff33\145\uff33" +
    "\150\254\151\263\001\002\000\076\003\uff35\004\uff35\005" +
    "\uff35\006\uff35\010\uff35\012\uff35\013\uff35\014\uff35\074\uff35" +
    "\075\uff35\076\uff35\077\uff35\100\uff35\101\uff35\114\uff35\115" +
    "\uff35\116\uff35\117\uff35\123\uff35\126\uff35\130\uff35\132\uff35" +
    "\136\uff35\141\uff35\142\uff35\143\uff35\144\uff35\145\uff35\150" +
    "\254\151\263\001\002\000\076\003\uff3d\004\255\005\245" +
    "\006\256\010\uff3d\012\uff3d\013\uff3d\014\uff3d\074\247\075" +
    "\261\076\262\077\250\100\uff3d\101\uff3d\114\uff3d\115\uff3d" +
    "\116\uff3d\117\uff3d\123\uff3d\126\uff3d\130\uff3d\132\uff3d\136" +
    "\uff3d\141\251\142\uff3d\143\uff3d\144\uff3d\145\uff3d\150\254" +
    "\151\263\001\002\000\076\003\uff3a\004\255\005\245\006" +
    "\uff3a\010\uff3a\012\uff3a\013\uff3a\014\uff3a\074\247\075\261" +
    "\076\262\077\250\100\uff3a\101\uff3a\114\uff3a\115\uff3a\116" +
    "\uff3a\117\uff3a\123\uff3a\126\uff3a\130\uff3a\132\uff3a\136\uff3a" +
    "\141\uff3a\142\uff3a\143\uff3a\144\uff3a\145\uff3a\150\254\151" +
    "\263\001\002\000\076\003\uff32\004\uff32\005\uff32\006\uff32" +
    "\010\uff32\012\uff32\013\uff32\014\uff32\074\uff32\075\uff32\076" +
    "\uff32\077\uff32\100\uff32\101\uff32\114\uff32\115\uff32\116\uff32" +
    "\117\uff32\123\uff32\126\uff32\130\uff32\132\uff32\136\uff32\141" +
    "\uff32\142\uff32\143\uff32\144\uff32\145\uff32\150\254\151\263" +
    "\001\002\000\076\003\uff39\004\uff39\005\uff39\006\uff39\010" +
    "\uff39\012\uff39\013\uff39\014\uff39\074\uff39\075\uff39\076\uff39" +
    "\077\uff39\100\uff39\101\uff39\114\uff39\115\uff39\116\uff39\117" +
    "\uff39\123\uff39\126\uff39\130\uff39\132\uff39\136\uff39\141\uff39" +
    "\142\uff39\143\uff39\144\uff39\145\uff39\150\uff39\151\uff39\001" +
    "\002\000\076\003\uff3b\004\255\005\245\006\uff3b\010\uff3b" +
    "\012\uff3b\013\uff3b\014\uff3b\074\247\075\261\076\262\077" +
    "\250\100\uff3b\101\uff3b\114\uff3b\115\uff3b\116\uff3b\117\uff3b" +
    "\123\uff3b\126\uff3b\130\uff3b\132\uff3b\136\uff3b\141\uff3b\142" +
    "\uff3b\143\uff3b\144\uff3b\145\uff3b\150\254\151\263\001\002" +
    "\000\076\003\uff34\004\uff34\005\uff34\006\uff34\010\uff34\012" +
    "\uff34\013\uff34\014\uff34\074\uff34\075\uff34\076\uff34\077\uff34" +
    "\100\uff34\101\uff34\114\uff34\115\uff34\116\uff34\117\uff34\123" +
    "\uff34\126\uff34\130\uff34\132\uff34\136\uff34\141\uff34\142\uff34" +
    "\143\uff34\144\uff34\145\uff34\150\254\151\263\001\002\000" +
    "\076\003\uff36\004\uff36\005\uff36\006\uff36\010\uff36\012\uff36" +
    "\013\uff36\014\uff36\074\uff36\075\uff36\076\uff36\077\uff36\100" +
    "\uff36\101\uff36\114\uff36\115\uff36\116\uff36\117\uff36\123\uff36" +
    "\126\uff36\130\uff36\132\uff36\136\uff36\141\uff36\142\uff36\143" +
    "\uff36\144\uff36\145\uff36\150\254\151\263\001\002\000\076" +
    "\003\uff3e\004\255\005\245\006\256\010\uff3e\012\uff3e\013" +
    "\uff3e\014\uff3e\074\247\075\261\076\262\077\250\100\uff3e" +
    "\101\uff3e\114\uff3e\115\uff3e\116\uff3e\117\uff3e\123\uff3e\126" +
    "\uff3e\130\uff3e\132\uff3e\136\uff3e\141\251\142\uff3e\143\uff3e" +
    "\144\uff3e\145\uff3e\150\254\151\263\001\002\000\076\003" +
    "\uff31\004\uff31\005\uff31\006\uff31\010\uff31\012\uff31\013\uff31" +
    "\014\uff31\074\uff31\075\uff31\076\uff31\077\uff31\100\uff31\101" +
    "\uff31\114\uff31\115\uff31\116\uff31\117\uff31\123\uff31\126\uff31" +
    "\130\uff31\132\uff31\136\uff31\141\uff31\142\uff31\143\uff31\144" +
    "\uff31\145\uff31\150\254\151\263\001\002\000\004\012\301" +
    "\001\002\000\076\003\uff1e\004\uff1e\005\uff1e\006\uff1e\010" +
    "\uff1e\012\uff1e\013\uff1e\014\uff1e\074\uff1e\075\uff1e\076\uff1e" +
    "\077\uff1e\100\uff1e\101\uff1e\114\uff1e\115\uff1e\116\uff1e\117" +
    "\uff1e\123\uff1e\126\uff1e\130\uff1e\132\uff1e\136\uff1e\141\uff1e" +
    "\142\uff1e\143\uff1e\144\uff1e\145\uff1e\150\uff1e\151\uff1e\001" +
    "\002\000\022\003\uff5a\014\uff5a\100\uff5a\101\uff5a\114\uff5a" +
    "\115\uff5a\116\uff5a\121\uff5a\001\002\000\022\003\311\014" +
    "\154\100\152\101\167\114\171\115\147\116\166\121\151" +
    "\001\002\000\004\144\333\001\002\000\042\003\uff59\010" +
    "\uff59\012\uff59\013\uff59\014\uff59\100\uff59\101\uff59\114\uff59" +
    "\115\uff59\116\uff59\117\uff59\123\uff59\126\uff59\130\uff59\144" +
    "\uff59\145\uff59\001\002\000\004\144\332\001\002\000\004" +
    "\144\331\001\002\000\004\144\330\001\002\000\014\122" +
    "\321\144\316\145\322\146\320\147\317\001\002\000\032" +
    "\003\170\014\154\100\152\101\167\114\171\115\147\116" +
    "\166\117\165\121\151\123\157\126\174\130\155\001\002" +
    "\000\032\003\211\014\154\100\152\101\167\114\171\115" +
    "\147\116\166\117\165\123\157\126\174\130\155\145\203" +
    "\001\002\000\042\003\uff73\010\uff73\012\uff73\013\uff73\014" +
    "\uff73\100\uff73\101\uff73\114\uff73\115\uff73\116\uff73\117\uff73" +
    "\123\uff73\126\uff73\130\uff73\144\uff73\145\uff73\001\002\000" +
    "\044\003\uff54\010\uff54\012\uff54\013\uff54\014\uff54\100\uff54" +
    "\101\uff54\114\uff54\115\uff54\116\uff54\117\uff54\123\uff54\125" +
    "\uff54\126\uff54\130\uff54\144\uff54\145\uff54\001\002\000\006" +
    "\012\uff4b\144\uff4b\001\002\000\044\003\uff53\010\uff53\012" +
    "\uff53\013\uff53\014\uff53\100\uff53\101\uff53\114\uff53\115\uff53" +
    "\116\uff53\117\uff53\123\uff53\125\uff53\126\uff53\130\uff53\144" +
    "\uff53\145\uff53\001\002\000\004\145\323\001\002\000\044" +
    "\003\uff51\010\uff51\012\uff51\013\uff51\014\uff51\100\uff51\101" +
    "\uff51\114\uff51\115\uff51\116\uff51\117\uff51\123\uff51\125\uff51" +
    "\126\uff51\130\uff51\144\uff51\145\uff51\001\002\000\044\003" +
    "\uff52\010\uff52\012\uff52\013\uff52\014\uff52\100\uff52\101\uff52" +
    "\114\uff52\115\uff52\116\uff52\117\uff52\123\uff52\125\uff52\126" +
    "\uff52\130\uff52\144\uff52\145\uff52\001\002\000\032\003\170" +
    "\014\154\100\152\101\167\114\171\115\147\116\166\117" +
    "\165\121\151\123\157\126\174\130\155\001\002\000\032" +
    "\003\211\014\154\100\152\101\167\114\171\115\147\116" +
    "\166\117\165\123\157\126\174\130\155\145\325\001\002" +
    "\000\004\147\326\001\002\000\004\122\327\001\002\000" +
    "\044\003\uff50\010\uff50\012\uff50\013\uff50\014\uff50\100\uff50" +
    "\101\uff50\114\uff50\115\uff50\116\uff50\117\uff50\123\uff50\125" +
    "\uff50\126\uff50\130\uff50\144\uff50\145\uff50\001\002\000\044" +
    "\003\uff57\010\uff57\012\uff57\013\uff57\014\uff57\100\uff57\101" +
    "\uff57\114\uff57\115\uff57\116\uff57\117\uff57\123\uff57\125\uff57" +
    "\126\uff57\130\uff57\144\uff57\145\uff57\001\002\000\044\003" +
    "\uff58\010\uff58\012\uff58\013\uff58\014\uff58\100\uff58\101\uff58" +
    "\114\uff58\115\uff58\116\uff58\117\uff58\123\uff58\125\uff58\126" +
    "\uff58\130\uff58\144\uff58\145\uff58\001\002\000\044\003\uff55" +
    "\010\uff55\012\uff55\013\uff55\014\uff55\100\uff55\101\uff55\114" +
    "\uff55\115\uff55\116\uff55\117\uff55\123\uff55\125\uff55\126\uff55" +
    "\130\uff55\144\uff55\145\uff55\001\002\000\044\003\uff56\010" +
    "\uff56\012\uff56\013\uff56\014\uff56\100\uff56\101\uff56\114\uff56" +
    "\115\uff56\116\uff56\117\uff56\123\uff56\125\uff56\126\uff56\130" +
    "\uff56\144\uff56\145\uff56\001\002\000\046\011\220\101\231" +
    "\105\233\106\221\107\227\110\216\111\241\112\237\113" +
    "\230\120\223\132\224\133\235\134\217\135\232\136\240" +
    "\137\225\140\226\152\222\001\002\000\040\004\255\005" +
    "\245\006\256\012\336\074\247\075\261\076\262\077\250" +
    "\132\257\136\252\141\251\142\246\143\260\150\254\151" +
    "\263\001\002\000\076\003\uff23\004\uff23\005\uff23\006\uff23" +
    "\010\uff23\012\uff23\013\uff23\014\uff23\074\uff23\075\uff23\076" +
    "\uff23\077\uff23\100\uff23\101\uff23\114\uff23\115\uff23\116\uff23" +
    "\117\uff23\123\uff23\126\uff23\130\uff23\132\uff23\136\uff23\141" +
    "\uff23\142\uff23\143\uff23\144\uff23\145\uff23\150\uff23\151\uff23" +
    "\001\002\000\004\012\340\001\002\000\076\003\uff1d\004" +
    "\uff1d\005\uff1d\006\uff1d\010\uff1d\012\uff1d\013\uff1d\014\uff1d" +
    "\074\uff1d\075\uff1d\076\uff1d\077\uff1d\100\uff1d\101\uff1d\114" +
    "\uff1d\115\uff1d\116\uff1d\117\uff1d\123\uff1d\126\uff1d\130\uff1d" +
    "\132\uff1d\136\uff1d\141\uff1d\142\uff1d\143\uff1d\144\uff1d\145" +
    "\uff1d\150\uff1d\151\uff1d\001\002\000\046\011\220\101\231" +
    "\105\233\106\221\107\227\110\216\111\241\112\237\113" +
    "\230\120\223\132\224\133\235\134\217\135\232\136\240" +
    "\137\225\140\226\152\222\001\002\000\040\004\255\005" +
    "\245\006\256\012\343\074\247\075\261\076\262\077\250" +
    "\132\257\136\252\141\251\142\246\143\260\150\254\151" +
    "\263\001\002\000\076\003\uff21\004\uff21\005\uff21\006\uff21" +
    "\010\uff21\012\uff21\013\uff21\014\uff21\074\uff21\075\uff21\076" +
    "\uff21\077\uff21\100\uff21\101\uff21\114\uff21\115\uff21\116\uff21" +
    "\117\uff21\123\uff21\126\uff21\130\uff21\132\uff21\136\uff21\141" +
    "\uff21\142\uff21\143\uff21\144\uff21\145\uff21\150\uff21\151\uff21" +
    "\001\002\000\004\072\345\001\002\000\004\012\346\001" +
    "\002\000\076\003\uff1c\004\uff1c\005\uff1c\006\uff1c\010\uff1c" +
    "\012\uff1c\013\uff1c\014\uff1c\074\uff1c\075\uff1c\076\uff1c\077" +
    "\uff1c\100\uff1c\101\uff1c\114\uff1c\115\uff1c\116\uff1c\117\uff1c" +
    "\123\uff1c\126\uff1c\130\uff1c\132\uff1c\136\uff1c\141\uff1c\142" +
    "\uff1c\143\uff1c\144\uff1c\145\uff1c\150\uff1c\151\uff1c\001\002" +
    "\000\076\003\uff37\004\uff37\005\uff37\006\uff37\010\uff37\012" +
    "\uff37\013\uff37\014\uff37\074\uff37\075\uff37\076\uff37\077\uff37" +
    "\100\uff37\101\uff37\114\uff37\115\uff37\116\uff37\117\uff37\123" +
    "\uff37\126\uff37\130\uff37\132\uff37\136\uff37\141\uff37\142\uff37" +
    "\143\uff37\144\uff37\145\uff37\150\uff37\151\uff37\001\002\000" +
    "\046\011\220\101\231\105\233\106\221\107\227\110\216" +
    "\111\241\112\237\113\230\120\223\132\224\133\235\134" +
    "\217\135\232\136\240\137\225\140\226\152\222\001\002" +
    "\000\040\004\255\005\245\006\256\012\352\074\247\075" +
    "\261\076\262\077\250\132\257\136\252\141\251\142\246" +
    "\143\260\150\254\151\263\001\002\000\076\003\uff22\004" +
    "\uff22\005\uff22\006\uff22\010\uff22\012\uff22\013\uff22\014\uff22" +
    "\074\uff22\075\uff22\076\uff22\077\uff22\100\uff22\101\uff22\114" +
    "\uff22\115\uff22\116\uff22\117\uff22\123\uff22\126\uff22\130\uff22" +
    "\132\uff22\136\uff22\141\uff22\142\uff22\143\uff22\144\uff22\145" +
    "\uff22\150\uff22\151\uff22\001\002\000\004\012\356\001\002" +
    "\000\040\004\255\005\245\006\256\012\355\074\247\075" +
    "\261\076\262\077\250\132\257\136\252\141\251\142\246" +
    "\143\260\150\254\151\263\001\002\000\076\003\uff30\004" +
    "\uff30\005\uff30\006\uff30\010\uff30\012\uff30\013\uff30\014\uff30" +
    "\074\uff30\075\uff30\076\uff30\077\uff30\100\uff30\101\uff30\114" +
    "\uff30\115\uff30\116\uff30\117\uff30\123\uff30\126\uff30\130\uff30" +
    "\132\uff30\136\uff30\141\uff30\142\uff30\143\uff30\144\uff30\145" +
    "\uff30\150\uff30\151\uff30\001\002\000\076\003\uff2f\004\uff2f" +
    "\005\uff2f\006\uff2f\010\uff2f\012\uff2f\013\uff2f\014\uff2f\074" +
    "\uff2f\075\uff2f\076\uff2f\077\uff2f\100\uff2f\101\uff2f\114\uff2f" +
    "\115\uff2f\116\uff2f\117\uff2f\123\uff2f\126\uff2f\130\uff2f\132" +
    "\uff2f\136\uff2f\141\uff2f\142\uff2f\143\uff2f\144\uff2f\145\uff2f" +
    "\150\uff2f\151\uff2f\001\002\000\046\011\220\101\231\105" +
    "\233\106\221\107\227\110\216\111\241\112\237\113\230" +
    "\120\223\132\224\133\235\134\217\135\232\136\240\137" +
    "\225\140\226\152\222\001\002\000\040\004\255\005\245" +
    "\006\256\012\361\074\247\075\261\076\262\077\250\132" +
    "\257\136\252\141\251\142\246\143\260\150\254\151\263" +
    "\001\002\000\076\003\uff20\004\uff20\005\uff20\006\uff20\010" +
    "\uff20\012\uff20\013\uff20\014\uff20\074\uff20\075\uff20\076\uff20" +
    "\077\uff20\100\uff20\101\uff20\114\uff20\115\uff20\116\uff20\117" +
    "\uff20\123\uff20\126\uff20\130\uff20\132\uff20\136\uff20\141\uff20" +
    "\142\uff20\143\uff20\144\uff20\145\uff20\150\uff20\151\uff20\001" +
    "\002\000\042\003\uff6f\010\uff6f\012\uff6f\013\uff6f\014\uff6f" +
    "\100\uff6f\101\uff6f\114\uff6f\115\uff6f\116\uff6f\117\uff6f\123" +
    "\uff6f\126\uff6f\130\uff6f\144\uff6f\145\uff6f\001\002\000\046" +
    "\011\220\101\231\105\233\106\221\107\227\110\216\111" +
    "\241\112\237\113\230\120\223\132\224\133\235\134\217" +
    "\135\232\136\240\137\225\140\226\152\222\001\002\000" +
    "\040\004\255\005\245\006\256\012\365\074\247\075\261" +
    "\076\262\077\250\132\257\136\252\141\251\142\246\143" +
    "\260\150\254\151\263\001\002\000\004\144\uff61\001\002" +
    "\000\034\003\170\014\154\100\152\101\167\114\171\115" +
    "\147\116\166\117\165\121\151\123\157\126\174\130\155" +
    "\144\uff4b\001\002\000\046\011\220\101\231\105\233\106" +
    "\221\107\227\110\216\111\241\112\237\113\230\120\223" +
    "\132\224\133\235\134\217\135\232\136\240\137\225\140" +
    "\226\152\222\001\002\000\076\003\uff70\004\255\005\245" +
    "\006\256\010\uff70\012\uff70\013\uff70\014\uff70\074\247\075" +
    "\261\076\262\077\250\100\uff70\101\uff70\114\uff70\115\uff70" +
    "\116\uff70\117\uff70\123\uff70\126\uff70\130\uff70\132\257\136" +
    "\252\141\251\142\246\143\260\144\uff70\145\uff70\150\254" +
    "\151\263\001\002\000\042\003\uff72\010\uff72\012\uff72\013" +
    "\uff72\014\uff72\100\uff72\101\uff72\114\uff72\115\uff72\116\uff72" +
    "\117\uff72\123\uff72\126\uff72\130\uff72\144\uff72\145\uff72\001" +
    "\002\000\046\011\220\101\231\105\233\106\221\107\227" +
    "\110\216\111\241\112\237\113\230\120\223\132\224\133" +
    "\235\134\217\135\232\136\240\137\225\140\226\152\222" +
    "\001\002\000\042\004\255\005\245\006\256\012\uff49\074" +
    "\247\075\261\076\262\077\250\132\257\136\252\141\251" +
    "\142\246\143\260\144\uff49\150\254\151\263\001\002\000" +
    "\004\012\375\001\002\000\004\144\uff62\001\002\000\006" +
    "\073\u0101\101\377\001\002\000\006\012\uff64\013\uff64\001" +
    "\002\000\006\012\uff66\013\u0105\001\002\000\006\012\uff65" +
    "\013\uff65\001\002\000\004\012\u0103\001\002\000\004\144" +
    "\u0104\001\002\000\042\003\uff68\010\uff68\012\uff68\013\uff68" +
    "\014\uff68\100\uff68\101\uff68\114\uff68\115\uff68\116\uff68\117" +
    "\uff68\123\uff68\126\uff68\130\uff68\144\uff68\145\uff68\001\002" +
    "\000\006\073\u0101\101\377\001\002\000\004\012\uff67\001" +
    "\002\000\016\003\uff77\004\uff77\012\uff77\103\uff77\104\uff77" +
    "\144\uff77\001\002\000\046\011\220\101\231\105\233\106" +
    "\221\107\227\110\216\111\241\112\237\113\230\120\223" +
    "\132\224\133\235\134\217\135\232\136\240\137\225\140" +
    "\226\152\222\001\002\000\040\004\255\005\245\006\256" +
    "\012\u010a\074\247\075\261\076\262\077\250\132\257\136" +
    "\252\141\251\142\246\143\260\150\254\151\263\001\002" +
    "\000\004\124\u010b\001\002\000\022\003\uff5d\014\uff5d\100" +
    "\uff5d\101\uff5d\114\uff5d\115\uff5d\116\uff5d\121\uff5d\001\002" +
    "\000\046\011\220\101\231\105\233\106\221\107\227\110" +
    "\216\111\241\112\237\113\230\120\223\132\224\133\235" +
    "\134\217\135\232\136\240\137\225\140\226\152\222\001" +
    "\002\000\040\004\255\005\245\006\256\012\u010e\074\247" +
    "\075\261\076\262\077\250\132\257\136\252\141\251\142" +
    "\246\143\260\150\254\151\263\001\002\000\004\131\uff5c" +
    "\001\002\000\004\131\u0110\001\002\000\022\003\311\014" +
    "\154\100\152\101\167\114\171\115\147\116\166\121\151" +
    "\001\002\000\042\003\uff5b\010\uff5b\012\uff5b\013\uff5b\014" +
    "\uff5b\100\uff5b\101\uff5b\114\uff5b\115\uff5b\116\uff5b\117\uff5b" +
    "\123\uff5b\126\uff5b\130\uff5b\144\uff5b\145\uff5b\001\002\000" +
    "\004\010\u0113\001\002\000\010\003\131\103\132\104\130" +
    "\001\002\000\014\003\135\012\uff48\103\132\104\130\144" +
    "\uff48\001\002\000\044\003\uff60\010\uff60\012\uff60\013\uff60" +
    "\014\uff60\100\uff60\101\uff60\114\uff60\115\uff60\116\uff60\117" +
    "\uff60\123\uff60\125\u0116\126\uff60\130\uff60\144\uff60\145\uff60" +
    "\001\002\000\022\003\uff5f\014\uff5f\100\uff5f\101\uff5f\114" +
    "\uff5f\115\uff5f\116\uff5f\121\uff5f\001\002\000\022\003\311" +
    "\014\154\100\152\101\167\114\171\115\147\116\166\121" +
    "\151\001\002\000\042\003\uff5e\010\uff5e\012\uff5e\013\uff5e" +
    "\014\uff5e\100\uff5e\101\uff5e\114\uff5e\115\uff5e\116\uff5e\117" +
    "\uff5e\123\uff5e\126\uff5e\130\uff5e\144\uff5e\145\uff5e\001\002" +
    "\000\006\003\uff45\101\uff45\001\002\000\006\003\u011c\101" +
    "\u011b\001\002\000\012\012\uff41\013\uff41\014\uff41\144\uff41" +
    "\001\002\000\004\144\u0124\001\002\000\012\012\uff44\013" +
    "\uff44\014\uff44\144\uff44\001\002\000\012\012\uff40\013\u011f" +
    "\014\u0121\144\uff40\001\002\000\004\101\u011b\001\002\000" +
    "\006\012\uff47\144\uff47\001\002\000\046\011\220\101\231" +
    "\105\233\106\221\107\227\110\216\111\241\112\237\113" +
    "\230\120\223\132\224\133\235\134\217\135\232\136\240" +
    "\137\225\140\226\152\222\001\002\000\042\004\255\005" +
    "\245\006\256\012\uff3f\074\247\075\261\076\262\077\250" +
    "\132\257\136\252\141\251\142\246\143\260\144\uff3f\150" +
    "\254\151\263\001\002\000\012\012\uff43\013\uff43\014\uff43" +
    "\144\uff43\001\002\000\032\003\170\014\154\100\152\101" +
    "\167\114\171\115\147\116\166\117\165\121\151\123\157" +
    "\126\174\130\155\001\002\000\036\003\211\012\uff42\013" +
    "\uff42\014\uff42\100\152\101\167\114\171\115\147\116\166" +
    "\117\165\123\157\126\174\130\155\144\uff42\001\002\000" +
    "\004\145\u0127\001\002\000\032\003\uff4f\014\uff4f\100\uff4f" +
    "\101\uff4f\114\uff4f\115\uff4f\116\uff4f\117\uff4f\121\uff4f\123" +
    "\uff4f\126\uff4f\130\uff4f\001\002\000\042\003\uff69\010\uff69" +
    "\012\uff69\013\uff69\014\uff69\100\uff69\101\uff69\114\uff69\115" +
    "\uff69\116\uff69\117\uff69\123\uff69\126\uff69\130\uff69\144\uff69" +
    "\145\uff69\001\002\000\004\012\u012a\001\002\000\004\144" +
    "\uff63\001\002\000\032\003\170\014\154\100\152\101\167" +
    "\114\171\115\147\116\166\117\165\121\151\123\157\126" +
    "\174\130\155\001\002\000\016\003\uff79\004\uff79\012\uff79" +
    "\103\uff79\104\uff79\144\uff79\001\002\000\032\003\211\010" +
    "\u012e\014\154\100\152\101\167\114\171\115\147\116\166" +
    "\117\165\123\157\126\174\130\155\001\002\000\016\003" +
    "\uff7a\004\uff7a\012\uff7a\103\uff7a\104\uff7a\144\uff7a\001\002" +
    "\000\004\012\u0130\001\002\000\004\007\uff7e\001\002\000" +
    "\004\007\u0132\001\002\000\032\003\170\014\154\100\152" +
    "\101\167\114\171\115\147\116\166\117\165\121\151\123" +
    "\157\126\174\130\155\001\002\000\032\003\211\010\u0134" +
    "\014\154\100\152\101\167\114\171\115\147\116\166\117" +
    "\165\123\157\126\174\130\155\001\002\000\016\003\uff7d" +
    "\004\uff7d\012\uff7d\103\uff7d\104\uff7d\144\uff7d\001\002\000" +
    "\006\005\u0136\007\057\001\002\000\006\004\uff86\070\062" +
    "\001\002\000\004\004\063\001\002\000\004\023\u0139\001" +
    "\002\000\004\005\u013a\001\002\000\012\002\uff94\004\uff94" +
    "\005\uff94\007\uff94\001\002\000\004\004\u013c\001\002\000" +
    "\034\003\045\006\067\023\052\024\050\025\042\026\040" +
    "\030\037\031\041\032\043\033\047\034\054\035\036\036" +
    "\053\001\002\000\004\030\u013e\001\002\000\004\005\u013f" +
    "\001\002\000\012\002\uff90\004\uff90\005\uff90\007\uff90\001" +
    "\002\000\012\005\u014f\007\u014e\010\u014d\014\u0150\001\002" +
    "\000\006\005\u0143\007\u0142\001\002\000\016\037\076\042" +
    "\070\044\077\045\072\046\073\047\u0148\001\002\000\004" +
    "\004\063\001\002\000\004\024\u0145\001\002\000\004\005" +
    "\u0146\001\002\000\012\002\uff93\004\uff93\005\uff93\007\uff93" +
    "\001\002\000\004\010\u014c\001\002\000\004\014\u014a\001" +
    "\002\000\016\010\uffdd\037\076\042\070\044\077\045\072" +
    "\046\073\001\002\000\004\066\u014b\001\002\000\004\010" +
    "\uffdc\001\002\000\006\005\uffe2\007\uffe2\001\002\000\006" +
    "\005\uffdf\007\uffdf\001\002\000\006\005\uffe0\007\uffe0\001" +
    "\002\000\004\004\035\001\002\000\006\005\uffe1\007\uffe1" +
    "\001\002\000\010\004\122\005\uffde\007\uffde\001\002\000" +
    "\012\005\u0165\007\u0164\010\u0163\014\u0166\001\002\000\006" +
    "\005\u0155\007\u0154\001\002\000\020\037\076\041\u015a\042" +
    "\070\044\077\045\072\046\073\060\u015b\001\002\000\006" +
    "\004\uff86\070\062\001\002\000\004\004\063\001\002\000" +
    "\004\033\u0158\001\002\000\004\005\u0159\001\002\000\012" +
    "\002\uff8d\004\uff8d\005\uff8d\007\uff8d\001\002\000\004\014" +
    "\u0161\001\002\000\004\014\u015f\001\002\000\004\010\u015e" +
    "\001\002\000\016\010\uffb8\037\076\042\070\044\077\045" +
    "\072\046\073\001\002\000\006\005\uffbd\007\uffbd\001\002" +
    "\000\004\067\u0160\001\002\000\004\010\uffb6\001\002\000" +
    "\004\043\u0162\001\002\000\004\010\uffb7\001\002\000\006" +
    "\005\uffba\007\uffba\001\002\000\006\005\uffbb\007\uffbb\001" +
    "\002\000\004\004\035\001\002\000\006\005\uffbc\007\uffbc" +
    "\001\002\000\010\004\122\005\uffb9\007\uffb9\001\002\000" +
    "\004\004\u013c\001\002\000\006\002\uff82\004\uff82\001\002" +
    "\000\034\003\045\023\052\024\050\025\042\026\040\027" +
    "\u0172\030\037\031\041\032\043\033\047\034\054\035\036" +
    "\036\053\001\002\000\006\005\u0179\070\u017a\001\002\000" +
    "\004\004\u016d\001\002\000\006\006\067\027\u0172\001\002" +
    "\000\006\002\uff83\004\uff83\001\002\000\004\026\u0170\001" +
    "\002\000\004\005\u0171\001\002\000\012\002\uff91\004\uff91" +
    "\005\uff91\007\uff91\001\002\000\004\005\u0173\001\002\000" +
    "\004\070\u0174\001\002\000\004\004\u0175\001\002\000\004" +
    "\006\u0176\001\002\000\004\027\u0177\001\002\000\004\005" +
    "\u0178\001\002\000\006\002\uff81\004\uff81\001\002\000\004" +
    "\004\035\001\002\000\004\005\u017b\001\002\000\004\004" +
    "\035\001\002\000\006\002\uff97\004\uff97\001\002\000\006" +
    "\002\uff98\004\uff98\001\002\000\004\022\u017f\001\002\000" +
    "\004\005\u0180\001\002\000\006\002\uff99\004\uff99\001\002" +
    "\000\004\005\u0185\001\002\000\012\002\uff89\004\122\005" +
    "\uff89\007\uff89\001\002\000\004\004\035\001\002\000\012" +
    "\002\uff88\004\uff88\005\uff88\007\uff88\001\002\000\012\002" +
    "\uff87\004\uff87\005\uff87\007\uff87\001\002\000\012\002\uff8e" +
    "\004\uff8e\005\uff8e\007\uff8e\001\002\000\012\005\u019f\007" +
    "\u019e\010\u019d\014\u01a0\001\002\000\006\005\u018a\007\u0189" +
    "\001\002\000\016\037\u0192\044\077\045\072\046\073\050" +
    "\u0191\051\u0194\001\002\000\006\004\uff86\070\062\001\002" +
    "\000\004\004\063\001\002\000\004\025\u018d\001\002\000" +
    "\004\005\u018e\001\002\000\012\002\uff92\004\uff92\005\uff92" +
    "\007\uff92\001\002\000\012\010\uffff\044\uffff\045\uffff\046" +
    "\uffff\001\002\000\004\010\u019c\001\002\000\004\014\u019a" +
    "\001\002\000\004\014\u0198\001\002\000\012\010\uffd2\044" +
    "\077\045\072\046\073\001\002\000\004\014\u0195\001\002" +
    "\000\004\052\u0196\001\002\000\004\010\uffd3\001\002\000" +
    "\012\010\000\044\000\045\000\046\000\001\002\000\004" +
    "\071\u0199\001\002\000\004\010\uffd5\001\002\000\004\052" +
    "\u019b\001\002\000\004\010\uffd4\001\002\000\006\005\uffda" +
    "\007\uffda\001\002\000\006\005\uffd7\007\uffd7\001\002\000" +
    "\006\005\uffd8\007\uffd8\001\002\000\004\004\035\001\002" +
    "\000\006\005\uffd9\007\uffd9\001\002\000\010\004\122\005" +
    "\uffd6\007\uffd6\001\002\000\006\005\u01aa\007\u01a9\001\002" +
    "\000\012\005\u01a6\007\u01a5\010\u01a4\014\u01a7\001\002\000" +
    "\006\005\uffc5\007\uffc5\001\002\000\006\005\uffc6\007\uffc6" +
    "\001\002\000\004\004\035\001\002\000\006\005\uffc7\007" +
    "\uffc7\001\002\000\010\004\122\005\uffc4\007\uffc4\001\002" +
    "\000\014\037\u01ab\054\u01af\055\u01ae\056\u01b0\057\u01ad\001" +
    "\002\000\012\002\uff8f\004\uff8f\005\uff8f\007\uff8f\001\002" +
    "\000\004\014\u01bc\001\002\000\004\010\u01bb\001\002\000" +
    "\004\014\u01b9\001\002\000\004\014\u01b7\001\002\000\004" +
    "\014\u01b5\001\002\000\004\014\u01b1\001\002\000\006\062" +
    "\u01b4\063\u01b2\001\002\000\004\010\uffae\001\002\000\004" +
    "\010\uffc0\001\002\000\004\010\uffad\001\002\000\004\021" +
    "\u01b6\001\002\000\004\010\uffc2\001\002\000\006\062\u01b4" +
    "\063\u01b2\001\002\000\004\010\uffc1\001\002\000\004\134" +
    "\u01ba\001\002\000\004\010\uffbf\001\002\000\006\005\uffc8" +
    "\007\uffc8\001\002\000\004\071\u01bd\001\002\000\004\010" +
    "\uffc3\001\002\000\006\005\u01bf\007\057\001\002\000\006" +
    "\003\uff84\004\uff84\001\002\000\012\005\u01cc\007\u01cb\010" +
    "\u01ca\014\u01cd\001\002\000\006\005\u01c3\007\u01c2\001\002" +
    "\000\016\037\076\041\u01c4\042\070\044\077\045\072\046" +
    "\073\001\002\000\004\004\uff80\001\002\000\004\014\u01c8" +
    "\001\002\000\016\010\uffca\037\076\042\070\044\077\045" +
    "\072\046\073\001\002\000\004\010\u01c7\001\002\000\006" +
    "\005\uffd0\007\uffd0\001\002\000\004\043\u01c9\001\002\000" +
    "\004\010\uffcb\001\002\000\006\005\uffcd\007\uffcd\001\002" +
    "\000\006\005\uffce\007\uffce\001\002\000\004\004\035\001" +
    "\002\000\006\005\uffcf\007\uffcf\001\002\000\010\004\122" +
    "\005\uffcc\007\uffcc\001\002\000\006\005\u01d0\007\057\001" +
    "\002\000\004\070\u01d1\001\002\000\004\004\063\001\002" +
    "\000\004\035\u01d3\001\002\000\004\005\u01d4\001\002\000" +
    "\012\002\uff8b\004\uff8b\005\uff8b\007\uff8b\001\002\000\006" +
    "\003\u016b\004\u016a\001\002\000\006\002\uff9a\004\uff9a\001" +
    "\002\000\004\027\u0172\001\002\000\004\014\u01d9\001\002" +
    "\000\004\043\u01da\001\002\000\004\010\u01db\001\002\000" +
    "\004\005\uffe7\001\002\000\006\003\015\004\016\001\002" +
    "\000\006\002\uffa6\004\uffa6\001\002\000\006\003\uffa0\004" +
    "\uffa0\001\002\000\006\017\u01e7\020\u01e8\001\002\000\006" +
    "\004\u01fe\005\u01fd\001\002\000\006\003\u01e0\004\u01e3\001" +
    "\002\000\006\003\uffa1\004\uffa1\001\002\000\010\006\067" +
    "\017\u01e7\020\u01e8\001\002\000\004\016\u01e5\001\002\000" +
    "\004\005\u01e6\001\002\000\006\002\uffa3\004\uffa3\001\002" +
    "\000\004\005\u01f8\001\002\000\010\003\u01ea\005\uffed\007" +
    "\u01e9\001\002\000\004\061\u01f4\001\002\000\010\005\u01f1" +
    "\010\u01f0\014\u01f2\001\002\000\004\005\u01ec\001\002\000" +
    "\004\004\063\001\002\000\004\020\u01ee\001\002\000\004" +
    "\005\u01ef\001\002\000\006\003\uff9f\004\uff9f\001\002\000" +
    "\004\005\uffea\001\002\000\004\004\035\001\002\000\004" +
    "\005\uffeb\001\002\000\006\004\122\005\uffe9\001\002\000" +
    "\004\014\u01f5\001\002\000\004\021\u01f6\001\002\000\004" +
    "\010\u01f7\001\002\000\004\005\uffec\001\002\000\004\070" +
    "\u01f9\001\002\000\004\004\063\001\002\000\004\017\u01fb" +
    "\001\002\000\004\005\u01fc\001\002\000\006\003\uff9e\004" +
    "\uff9e\001\002\000\006\003\uff9b\004\uff9b\001\002\000\006" +
    "\003\uff9c\004\uff9c\001\002\000\006\003\uff9d\004\uff9d\001" +
    "\002\000\010\003\u0202\005\ufff6\007\ufff6\001\002\000\006" +
    "\005\u0209\007\u0208\001\002\000\012\005\u0205\007\u0204\010" +
    "\u0203\014\u0206\001\002\000\006\005\ufff2\007\ufff2\001\002" +
    "\000\006\005\ufff3\007\ufff3\001\002\000\010\004\035\005" +
    "\ufff1\007\ufff1\001\002\000\006\005\ufff4\007\ufff4\001\002" +
    "\000\010\004\122\005\ufff0\007\ufff0\001\002\000\006\037" +
    "\u020a\040\u020c\001\002\000\006\003\uffa9\004\uffa9\001\002" +
    "\000\004\014\u0210\001\002\000\004\010\u020f\001\002\000" +
    "\004\014\u020d\001\002\000\004\134\u020e\001\002\000\004" +
    "\010\uffee\001\002\000\006\005\ufff5\007\ufff5\001\002\000" +
    "\004\071\u0211\001\002\000\004\010\uffef\001\002\000\004" +
    "\004\u0213\001\002\000\010\006\u0214\016\024\022\023\001" +
    "\002\000\004\015\u0215\001\002\000\004\005\u0216\001\002" +
    "\000\004\002\uffac\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0214\000\006\002\006\016\003\001\001\000\014\003" +
    "\u0211\004\017\005\016\010\013\017\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\020\004\017\005\016" +
    "\010\013\017\012\001\001\000\006\006\u01e0\007\u01dd\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\021\005" +
    "\016\010\013\017\012\001\001\000\002\001\001\000\004" +
    "\062\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\043\015\050\020\045\001\001" +
    "\000\004\077\u01ce\001\001\000\004\072\u01c0\001\001\000" +
    "\004\077\u01bd\001\001\000\004\074\u01a1\001\001\000\004" +
    "\070\u0187\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\u0181\001\001\000\010\011\u0167\013\u016b\014\u0168" +
    "\001\001\000\004\076\u0152\001\001\000\004\066\u0140\001" +
    "\001\000\004\011\u013a\001\001\000\004\077\u0134\001\001" +
    "\000\002\001\001\000\004\077\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\100\073\103\070\104\074" +
    "\105\077\001\001\000\004\106\060\001\001\000\004\032" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\103\070\105" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\100\123\103\070\104\074\105\077\001" +
    "\001\000\004\011\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\122\015\050\020\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\021\132\030\126" +
    "\031\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\030\126\031\133\032\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\021\141\030\126\031\125\001\001\000" +
    "\006\030\126\031\133\001\001\000\002\001\001\000\004" +
    "\110\144\001\001\000\002\001\001\000\036\022\161\023" +
    "\160\037\171\040\155\041\163\042\157\043\162\044\152" +
    "\045\172\046\177\050\176\052\174\053\175\054\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\u0119\001\001\000\024\033\u0114\037\306\040" +
    "\155\041\163\042\157\050\311\052\307\053\303\054\305" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\023\313\037\171\040\155\041\163\042\157\043" +
    "\162\044\152\045\172\046\177\052\174\053\175\054\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\037" +
    "\211\040\155\041\163\042\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\034\235\035\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\034\353\035\233\001\001\000\002\001" +
    "\001\000\006\034\346\035\233\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\243\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\034\242\035\233\001" +
    "\001\000\004\036\243\001\001\000\002\001\001\000\006" +
    "\034\276\035\233\001\001\000\006\034\275\035\233\001" +
    "\001\000\006\034\274\035\233\001\001\000\006\034\273" +
    "\035\233\001\001\000\006\034\272\035\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\034\271\035\233" +
    "\001\001\000\006\034\270\035\233\001\001\000\006\034" +
    "\267\035\233\001\001\000\002\001\001\000\006\034\266" +
    "\035\233\001\001\000\006\034\265\035\233\001\001\000" +
    "\006\034\264\035\233\001\001\000\006\034\263\035\233" +
    "\001\001\000\004\036\243\001\001\000\004\036\243\001" +
    "\001\000\004\036\243\001\001\000\004\036\243\001\001" +
    "\000\004\036\243\001\001\000\004\036\243\001\001\000" +
    "\004\036\243\001\001\000\004\036\243\001\001\000\004" +
    "\036\243\001\001\000\004\036\243\001\001\000\004\036" +
    "\243\001\001\000\004\036\243\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\113\302\001\001\000\024\033" +
    "\304\037\306\040\155\041\163\042\157\050\311\052\307" +
    "\053\303\054\305\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\022\312\023\160\037\171\040" +
    "\155\041\163\042\157\043\162\044\152\045\172\046\177" +
    "\050\176\052\174\053\175\054\147\001\001\000\034\023" +
    "\313\037\171\040\155\041\163\042\157\043\162\044\152" +
    "\045\172\046\177\051\314\052\174\053\175\054\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\022\323\023\160\037\171\040\155" +
    "\041\163\042\157\043\162\044\152\045\172\046\177\050" +
    "\176\052\174\053\175\054\147\001\001\000\032\023\313" +
    "\037\171\040\155\041\163\042\157\043\162\044\152\045" +
    "\172\046\177\052\174\053\175\054\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\034\334\035\233\001\001\000\004\036\243\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\034\341\035\233\001\001\000\004\036\243\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\243\001\001\000\006\034" +
    "\350\035\233\001\001\000\004\036\243\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\243\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\034\357\035\233" +
    "\001\001\000\004\036\243\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\034\363\035\233\001\001\000\004" +
    "\036\243\001\001\000\002\001\001\000\036\022\370\023" +
    "\160\037\171\040\155\041\163\042\157\043\162\044\152" +
    "\045\172\046\177\050\176\052\174\053\175\054\147\001" +
    "\001\000\006\034\367\035\233\001\001\000\004\036\243" +
    "\001\001\000\032\023\313\037\171\040\155\041\163\042" +
    "\157\043\162\044\152\045\172\046\177\052\174\053\175" +
    "\054\147\001\001\000\006\034\372\035\233\001\001\000" +
    "\004\036\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\055\u0101\056\377\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\055\u0105\056\377\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\034\u0108" +
    "\035\233\001\001\000\004\036\243\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\034\u010c\035\233\001\001" +
    "\000\004\036\243\001\001\000\004\112\u010e\001\001\000" +
    "\002\001\001\000\024\033\u0110\037\306\040\155\041\163" +
    "\042\157\050\311\052\307\053\303\054\305\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\021\u0113\030\126" +
    "\031\125\001\001\000\006\030\126\031\133\001\001\000" +
    "\002\001\001\000\004\111\u0116\001\001\000\024\033\u0117" +
    "\037\306\040\155\041\163\042\157\050\311\052\307\053" +
    "\303\054\305\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\025\u011d\026\u011c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\u011f\001\001" +
    "\000\004\026\u0122\001\001\000\002\001\001\000\006\034" +
    "\u0121\035\233\001\001\000\004\036\243\001\001\000\002" +
    "\001\001\000\036\022\u0124\023\160\037\171\040\155\041" +
    "\163\042\157\043\162\044\152\045\172\046\177\050\176" +
    "\052\174\053\175\054\147\001\001\000\032\023\313\037" +
    "\171\040\155\041\163\042\157\043\162\044\152\045\172" +
    "\046\177\052\174\053\175\054\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\022\u012c\023\160\037\171\040" +
    "\155\041\163\042\157\043\162\044\152\045\172\046\177" +
    "\050\176\052\174\053\175\054\147\001\001\000\002\001" +
    "\001\000\032\023\313\037\171\040\155\041\163\042\157" +
    "\043\162\044\152\045\172\046\177\052\174\053\175\054" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\107\u0130\001\001\000\002\001\001\000\036\022\u0132\023" +
    "\160\037\171\040\155\041\163\042\157\043\162\044\152" +
    "\045\172\046\177\050\176\052\174\053\175\054\147\001" +
    "\001\000\032\023\313\037\171\040\155\041\163\042\157" +
    "\043\162\044\152\045\172\046\177\052\174\053\175\054" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\106\u0136\001\001\000\004\032\u0137\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\u013c" +
    "\001\001\000\010\012\122\015\050\020\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\065\u0146\103\070\104" +
    "\u0148\105\077\001\001\000\004\032\u0143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\103\070\105\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\u0150\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\075\u015b\103\070\104\u015c\105\077" +
    "\001\001\000\004\106\u0155\001\001\000\004\032\u0156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\103\070\105\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\u0166" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\u017d\001\001\000\002\001\001\000\010\012\043\015\050" +
    "\020\045\001\001\000\002\001\001\000\006\014\u016d\032" +
    "\u016e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\u017c\001\001\000\002\001\001\000\004\011\u017b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\u0183\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\067\u018f\102\u0192\103\u018e\001" +
    "\001\000\004\106\u018a\001\001\000\004\032\u018b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\103\u0196\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\u01a0\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\u01a7\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\073\u01ab\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\101\u01b2\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\101\u01b7\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\071\u01c5\103\070" +
    "\104\u01c4\105\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\103\070\105\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\u01cd\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\u01d1\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\u0167\013" +
    "\u01d5\014\u0168\001\001\000\004\014\u016d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\u01dc\004\017\005\016" +
    "\010\013\017\012\001\001\000\012\004\021\005\016\010" +
    "\013\017\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\u01e1\032\u01e3\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\061" +
    "\u01ea\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\u01ec\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\u01f2\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\u01f9\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\u01fe\001\001\000\002\001\001\000" +
    "\004\060\u0200\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\u0206\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\057\u020a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\021\005\016\010\013\017\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



//private Reportes reporte;
private ManejadorEstructura manejadorEtiquetas;
public parser(lexico entrada,ManejadorEstructura entrada1){
	super(entrada);
	manejadorEtiquetas = entrada1;
	//Reportes reporteEntrada	
	//reporte = reporteEntrada;
}
public void report_error(String message, Object info) {
	errorSintactco = true;
	StringBuffer m = new StringBuffer("Error");
	if(info instanceof java_cup.runtime.Symbol){
		java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
		int posxy [] =new int[2];
		int linea = 0,columna = 0;
		if(s.left >=0){
			//m.append("en linea ");
			linea = (s.left+1);
			if(s.right >=0){
				//m.append("columna "+(s.right+1));
				columna = (s.right+1);
			}
		}
		m.append(": "+message);		
		manejadorEtiquetas.agregarError("sintactico",m.toString(),new int []{linea,columna});
	}
	reserErrores();
}

public void reserErrores(){
	limpiarAuxiliares(); 
	manejadorEtiquetas.manejadorScript().resetBloque();   
	manejadorEtiquetas.manejadorScript().resetOperacion();
}

public void syntax_error(Symbol cur_token){
	errorSintactco = true;
    List<Integer> ids = this.expected_token_ids();
    String salida = "Error sintactico token :"+symbl_name_from_id(cur_token.sym);
    if(cur_token.value!=null)salida+=" Valor: "+cur_token.value.toString();
    if(ids.size()>0){
        salida+="\n Se esperaba: ";
        for (Integer e:ids){
        salida+= symbl_name_from_id(e)+",\n";
        }
    }
    //reporte.agregarError("sintactico",salida,(cur_token.left+1),(cur_token.right+1));
	manejadorEtiquetas.agregarError("sintactico",salida,new int []{(cur_token.left+1),(cur_token.right+1)});
    reserErrores();
}
public void report_fatal_error(String message, Object info){
	errorSintactco = true;
	//System.out.println("Error irrecuperable");
	reserErrores();
}
private List <String> parametros = new ArrayList<>();
private List<String> datosParametros = new ArrayList<>();
private List<String> ids = new ArrayList<>();
private Lexema lexemaAux = null;
private boolean existeOnload = false;
private int contadorOnload = 1;
//private List<Solicitudes> solicitudes = new ArrayList<>();
private boolean errorSintactco = false;

/*
public List<Solicitudes> getSolicitudes(){
	return this.solicitudes;
}
*/
private void limpiarAuxiliares(){
	parametros.clear();
	datosParametros.clear();
	repetidos = false;
}
private boolean repetidos = false;
private void agregarDatos(String tipo,String dato){
	if(!parametros.contains(tipo)){
		parametros.add(tipo);
		datosParametros.add(dato);
	}else repetidos = true;	
}

private void agregarEtiqueta(String tipo,int px,int py,String textoEtiquetas){
	//agregarEtiqueta(String tipoEtiqueta, List<String> parametros, List<String> datosParametros, String texto)
	int posXY [] = {px+1,py+1};
	if(!repetidos){
		// contieneId -1 si no contiene, caso contrario da la posicion
		int contieneId = parametros.indexOf("ID");
		if(contieneId >=0){
			String nombreId = datosParametros.get(contieneId);
			if(!ids.contains(nombreId)){
				manejadorEtiquetas.agregarEtiqueta(tipo,parametros,datosParametros,textoEtiquetas,posXY);
				ids.add(nombreId);
			}else {				
				manejadorEtiquetas.agregarError("Semantico","Id ----->\""+nombreId+"\"<----- ya existe en otra etiqueta",posXY);
			}
		}else{
			manejadorEtiquetas.agregarEtiqueta(tipo,parametros,datosParametros,textoEtiquetas,posXY);
		}
	}else{
		//agregarError(String tipo, String info, int[] posXY)
		manejadorEtiquetas.agregarError("Semantico","Parametros repetidos",posXY);
	}
	limpiarAuxiliares();
}

private void setDatosCig(int posx,int posy){
	int posXY [] = {posx,posy};
	int posId = parametros.indexOf("ID");
	String id="",name="";
	if(posId>=0)id = datosParametros.get(posId);
	int posName = parametros.indexOf("NAME");
	if(posName>=0)name = datosParametros.get(posName);	
	//setDatosCig(String id, String name)
	if(!manejadorEtiquetas.existeCaptcha(id)){
		manejadorEtiquetas.setDatosCig(id,name);
	}else {
		manejadorEtiquetas.agregarError("Semantico","Captcha ya existe con ese id: "+id,posXY);
	}
	limpiarAuxiliares();
}

private void verificadorOperaciones(Lexema parteIzquierda, String tipoOperacion, Lexema parteDerecha, int posX, int posY) {
        if(!errorSintactco){
			boolean auxError = false;
			String info = "";
			if (parteIzquierda != null && parteDerecha != null) {
				String resultadoOperacion = manejadorEtiquetas.manejadorScript().resultadoOperacion(parteIzquierda, tipoOperacion, parteDerecha);
				if (resultadoOperacion != null) {
					tipoOperacion = manejadorEtiquetas.manejadorScript().cambiosOperacion(parteIzquierda,tipoOperacion,parteDerecha);
					manejadorEtiquetas.manejadorScript().operar(parteIzquierda, tipoOperacion, parteDerecha);
				} else {
					auxError = true;
					info = "Operacion no valida, no se puede operar " + parteIzquierda.getTipo() + " con " + parteDerecha.getTipo() + " con el operador " + tipoOperacion;
				}
			} else {
				auxError = true;
				info = "Operacion no valida, no se puede operar realizar operacion con  "+tipoOperacion;
			}
			if (auxError) {
				int posXY[] = {posX + 1, posY + 1};
				manejadorEtiquetas.manejadorScript().errorOperar(true);
				System.out.println("Ocurrio error en asignacion de varible en " + tipoOperacion);            
				manejadorEtiquetas.agregarError("Semantico", info, posXY);
			}
		}else {			
			//manejadorEtiquetas.agregarError("Semantico", "Corrija error sintactico antes de operar", posXY);
		}
    }

	private void verificadorOperaciones(String tipoOperacion, Lexema parteDerecha, int posX, int posY) {
        if(!errorSintactco){
			boolean auxError = false;
			String info = "";
			if (parteDerecha != null) {
				String resultadoOperacion = manejadorEtiquetas.manejadorScript().resultadoOperacion(tipoOperacion, parteDerecha);
				if (resultadoOperacion != null) {                
					manejadorEtiquetas.manejadorScript().operar(tipoOperacion, parteDerecha);
				} else {
					auxError = true;
					info = "Operacion no valida, no se puede operar con " + parteDerecha.getTipo() + " con el operador " + tipoOperacion;
				}
			} else {
				auxError = true;
				info = "Operacion no valida, no se puede operar realizar operacion con  "+tipoOperacion;
			}
			if (auxError) {
				int posXY[] = {posX + 1, posY + 1};
				manejadorEtiquetas.manejadorScript().errorOperar(true);
				System.out.println("Ocurrio error en asignacion de varible en " + tipoOperacion);            
				manejadorEtiquetas.agregarError("Semantico", info, posXY);
			}
		}else {
			int posXY[] = {posX + 1, posY + 1};
			manejadorEtiquetas.agregarError("Semantico", "Corrija error sintactico antes de operar", posXY);
		}
    }

	private String getValor(Lexema entrada){
		if(entrada.getNombreVariable()!=null){
			return entrada.getNombreVariable();
		}else{
			return entrada.getValor();
		}
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S0 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // fonts ::= fonts font 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fonts",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // fonts ::= font 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fonts",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // font ::= FONT_SIZE IGUAL SIZE_PARAMETRO 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		agregarDatos("FONT_SIZE",A.toString());
		//System.out.println("FONT_SIZE  "+A.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // font ::= FONT_FAMILY IGUAL FAMILY_PARAMETRO 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		agregarDatos("FONT_FAMILY",A.toString());
		//System.out.println("FONT_FAMILY  "+A.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // font ::= TEXT_ALIGN IGUAL ALING_PARAMETRO 
            {
              Object RESULT =null;
		int Pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object P = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		agregarDatos("TEXT_ALIGN",A.toString());
		//System.out.println("TEXT_ALIGN  "+A.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // icfs ::= icfs icf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("icfs",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // icfs ::= icf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("icfs",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // icf ::= ID IGUAL ID_PARAMETRO 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		agregarDatos("ID",A.toString());
		//System.out.println("ID  "+A.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("icf",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // icf ::= COLOR IGUAL COLOR_PARAMETRO 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		agregarDatos("COLOR",A.toString());
		//System.out.println("Color  "+A.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("icf",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // icf ::= font 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("icf",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PCIGS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PCIGS",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PCIGS ::= PCIGS CORCHETE_ABIERTO PCIG CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PCIGS",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PCIGS ::= error IGUAL 
            {
              Object RESULT =null;
		
		//System.out.println("Recupero en PCIGS");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PCIGS",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PCIGS ::= error CORCHETE_ABIERTO 
            {
              Object RESULT =null;
		
		//System.out.println("Recupero en PCIGS");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PCIGS",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PCIGS ::= error CORCHETE_CERRADO 
            {
              Object RESULT =null;
		
		//System.out.println("Recupero en PCIGS");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PCIGS",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PCIGS ::= error MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PCIGS",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PCIGS ::= error MAYOR_QUE S7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PCIGS",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PCIG ::= ID IGUAL ID_PARAMETRO 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		agregarDatos("ID",A.toString());
		//System.out.println("ID "+"  "+A.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PCIG",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PCIG ::= NAME IGUAL STRING_PARAMETRO 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		agregarDatos("NAME",A.toString());
		//System.out.println("NAME  "+A.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PCIG",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PLINK ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLINK",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PLINK ::= CORCHETE_ABIERTO HREF IGUAL LINK_PARAMETRO CORCHETE_CERRADO 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT = A.toString();
		//System.out.println("HREF  "+A.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLINK",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PLINK ::= error IGUAL 
            {
              Object RESULT =null;
		
		//System.out.println("Recupero en PLINK");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLINK",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PLINK ::= error CORCHETE_CERRADO 
            {
              Object RESULT =null;
		
		//System.out.println("Recupero en PLINK");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLINK",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PLINK ::= error MAYOR_QUE S7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLINK",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PBODY ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PBODY",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PBODY ::= CORCHETE_ABIERTO BACKGROUND IGUAL COLOR_PARAMETRO CORCHETE_CERRADO 
            {
              Object RESULT =null;
		int Pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object P = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		agregarDatos("BACKGROUND",A.toString());
		agregarEtiqueta("C_BODY",Pleft,Pright,null);
		//System.out.println("BACKGROUND  "+A.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PBODY",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PBODY ::= error IGUAL 
            {
              Object RESULT =null;
		
		//System.out.println("Recupero en PBODY");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PBODY",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PBODY ::= error CORCHETE_CERRADO 
            {
              Object RESULT =null;
		
		//System.out.println("Recupero en PBODY");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PBODY",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PBODY ::= error MAYOR_QUE S7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PBODY",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PINPUTS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PINPUTS",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PINPUTS ::= PINPUTS CORCHETE_ABIERTO PINPUT CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PINPUTS",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PINPUTS ::= error IGUAL 
            {
              Object RESULT =null;
		
		//System.out.println("Recupero en PINPUTS");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PINPUTS",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PINPUTS ::= error CORCHETE_ABIERTO 
            {
              Object RESULT =null;
		
		//System.out.println("Recupero en PCPINPUTSIGS");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PINPUTS",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PINPUTS ::= error CORCHETE_CERRADO 
            {
              Object RESULT =null;
		
		//System.out.println("Recupero en PINPUTS");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PINPUTS",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PINPUTS ::= error MAYOR_QUE S7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PINPUTS",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PINPUT ::= icfs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PINPUT",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PINPUT ::= TYPE IGUAL TYPE_PARAMETRO 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		agregarDatos("TYPE",A.toString());
		//System.out.println("TYPE_PARAMETRO  "+A.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PINPUT",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PTEXTEAREAS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PTEXTEAREAS",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PTEXTEAREAS ::= PTEXTEAREAS CORCHETE_ABIERTO PTEXTEAREA CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PTEXTEAREAS",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PTEXTEAREAS ::= error IGUAL 
            {
              Object RESULT =null;
		
		//System.out.println("Recupero en PTEXTEAREAS");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PTEXTEAREAS",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PTEXTEAREAS ::= error CORCHETE_ABIERTO 
            {
              Object RESULT =null;
		
		//System.out.println("Recupero en PTEXTEAREAS");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PTEXTEAREAS",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PTEXTEAREAS ::= error CORCHETE_CERRADO 
            {
              Object RESULT =null;
		
		//System.out.println("Recupero en PTEXTEAREAS");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PTEXTEAREAS",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PTEXTEAREAS ::= error MAYOR_QUE S7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PTEXTEAREAS",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PTEXTEAREA ::= ID IGUAL ID_PARAMETRO 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		agregarDatos("ID",A.toString());
		//System.out.println("ID  "+A.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PTEXTEAREA",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PTEXTEAREA ::= COLS IGUAL ENTERO 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		agregarDatos("COLS",A.toString());
		//System.out.println("COLS  "+A.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PTEXTEAREA",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PTEXTEAREA ::= ROWS IGUAL ENTERO 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		agregarDatos("COLS",A.toString());
		//System.out.println("ROWS  "+A.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PTEXTEAREA",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PTEXTEAREA ::= fonts 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PTEXTEAREA",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PDIVS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PDIVS",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PDIVS ::= PDIVS CORCHETE_ABIERTO PDIV CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PDIVS",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PDIVS ::= error IGUAL 
            {
              Object RESULT =null;
		
		//System.out.println("Recupero en PDIVS");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PDIVS",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PDIVS ::= error CORCHETE_ABIERTO 
            {
              Object RESULT =null;
		
		//System.out.println("Recupero en PDIVS");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PDIVS",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PDIVS ::= error CORCHETE_CERRADO 
            {
              Object RESULT =null;
		
		//System.out.println("Recupero en PDIVS");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PDIVS",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PDIVS ::= error MAYOR_QUE S7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PDIVS",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PDIV ::= BACKGROUND IGUAL COLOR_PARAMETRO 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		agregarDatos("BACKGROUND",A.toString());
		//System.out.println("BACKGROUND  "+A.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PDIV",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PDIV ::= icfs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PDIV",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PIMGS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PIMGS",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PIMGS ::= PIMGS CORCHETE_ABIERTO PIMG CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PIMGS",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PIMGS ::= error IGUAL 
            {
              Object RESULT =null;
				
		//System.out.println("Recupero en PIMGS");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PIMGS",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PIMGS ::= error CORCHETE_ABIERTO 
            {
              Object RESULT =null;
		
		//System.out.println("Recupero en PIMGS");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PIMGS",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PIMGS ::= error CORCHETE_CERRADO 
            {
              Object RESULT =null;
		
		//System.out.println("Recupero en PIMGS");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PIMGS",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PIMGS ::= error MAYOR_QUE S7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PIMGS",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PIMG ::= ID IGUAL ID_PARAMETRO 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		agregarDatos("ID",A.toString());
		//System.out.println("ID  "+A.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PIMG",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PIMG ::= SRC IGUAL LINK_PARAMETRO 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		agregarDatos("SRC",A.toString());
		//System.out.println("SRC  "+A.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PIMG",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PIMG ::= WIDTH IGUAL TIPOS_SIZE 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		agregarDatos("WIDTH",A.toString());
		//System.out.println("WIDTH  "+A.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PIMG",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PIMG ::= HEIGHT IGUAL TIPOS_SIZE 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		agregarDatos("HEIGHT",A.toString());
		//System.out.println("HEIGHT  "+A.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PIMG",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PIMG ::= ALT IGUAL STRING_PARAMETRO 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		agregarDatos("ALT",A.toString());
		//System.out.println("ALT  "+A.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PIMG",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PBUTTONS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PBUTTONS",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PBUTTONS ::= PBUTTONS CORCHETE_ABIERTO PBUTTON CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PBUTTONS",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PBUTTONS ::= error IGUAL 
            {
              Object RESULT =null;
		
		//System.out.println("Recupero en PBUTTONS");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PBUTTONS",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PBUTTONS ::= error CORCHETE_ABIERTO 
            {
              Object RESULT =null;
		
		//System.out.println("Recupero en PBUTTONS");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PBUTTONS",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PBUTTONS ::= error CORCHETE_CERRADO 
            {
              Object RESULT =null;
		
		//System.out.println("Recupero en PBUTTONS");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PBUTTONS",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PBUTTONS ::= error MAYOR_QUE S7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PBUTTONS",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PBUTTON ::= icfs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PBUTTON",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PBUTTON ::= BACKGROUND IGUAL COLOR_PARAMETRO 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		agregarDatos("BACKGROUND",A.toString());
		System.out.println("BACKGROUND  "+A.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PBUTTON",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PBUTTON ::= ONCLICK IGUAL NOMBRE_FUNCION_PARAMETRO 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		agregarDatos("ONCLICK",A.toString());
		//System.out.println("en 		ONCLICK  "+A.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PBUTTON",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // P_SELECT_P_H1_SPAMS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("P_SELECT_P_H1_SPAMS",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // P_SELECT_P_H1_SPAMS ::= P_SELECT_P_H1_SPAMS CORCHETE_ABIERTO PPSH CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("P_SELECT_P_H1_SPAMS",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // P_SELECT_P_H1_SPAMS ::= error IGUAL 
            {
              Object RESULT =null;
		
		//System.out.println("Recupero en P_SELECT_P_H1_SPAMS");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P_SELECT_P_H1_SPAMS",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // P_SELECT_P_H1_SPAMS ::= error CORCHETE_ABIERTO PPSH 
            {
              Object RESULT =null;
		
		//System.out.println("Recupero en P_SELECT_P_H1_SPAMS");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P_SELECT_P_H1_SPAMS",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // P_SELECT_P_H1_SPAMS ::= error CORCHETE_CERRADO 
            {
              Object RESULT =null;
		
		//System.out.println("Recupero en P_SELECT_P_H1_SPAMS");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P_SELECT_P_H1_SPAMS",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // P_SELECT_P_H1_SPAMS ::= error MAYOR_QUE S7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("P_SELECT_P_H1_SPAMS",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PPSH ::= icfs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPSH",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // TIPOS_SIZE ::= SIZE_PARAMETRO 
            {
              Object RESULT =null;
		int Tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object T = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = T.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_SIZE",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TIPOS_SIZE ::= SIZE_PARAMETRO_IMAGEN 
            {
              Object RESULT =null;
		int Tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object T = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = T.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_SIZE",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // S0 ::= S12 S1 MENOR_QUE DIAGONAL C_GCIC MAYOR_QUE 
            {
              Object RESULT =null;
		int Pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object P = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
			agregarEtiqueta("/C_GCIC",Pleft,Pright,null);
			//System.out.println("Estructura reconocida");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // S0 ::= error CORCHETE_ABIERTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // S0 ::= error MAYOR_QUE S1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // S12 ::= MENOR_QUE C_GCIC PCIGS MAYOR_QUE 
            {
              Object RESULT =null;
		int Pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object P = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
		setDatosCig(Pleft,Pright);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S12",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // S1 ::= S1 S2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // S1 ::= S2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // S1 ::= error MAYOR_QUE S1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // S2 ::= S3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // S2 ::= S6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // S3 ::= S13 S4 CIERRE C_HEAD MAYOR_QUE 
            {
              Object RESULT =null;
		int Pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object P = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
		agregarEtiqueta("/C_HEAD",Pleft,Pright,null);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // S13 ::= MENOR_QUE C_HEAD MAYOR_QUE 
            {
              Object RESULT =null;
		int Pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object P = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		agregarEtiqueta("C_HEAD",Pleft,Pright,null);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S13",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // S4 ::= S4 S5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S4",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // S4 ::= S5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S4",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // S5 ::= MENOR_QUE C_LINK PLINK MAYOR_QUE CIERRE C_LINK MAYOR_QUE 
            {
              Object RESULT =null;
		int Pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object P = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
			if(A!=null){
				agregarEtiqueta("C_LINK",Pleft,Pright,A.toString());
				manejadorEtiquetas.setLink(A.toString());
			}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S5",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // S5 ::= MENOR_QUE C_TITLE MAYOR_QUE TEXTO_ETIQUETA CIERRE C_TITLE MAYOR_QUE 
            {
              Object RESULT =null;
		int Pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object P = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
			 agregarEtiqueta("C_TITLE",Pleft,Pright,A.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S5",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // S5 ::= error MENOR_QUE S5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S5",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // S5 ::= error MENOR_QUE 
            {
              Object RESULT =null;
		
		//System.out.println("Recupero en s5 <");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S5",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // S5 ::= error MAYOR_QUE 
            {
              Object RESULT =null;
		
		//System.out.println("Recupero en s5 >");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S5",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // S6 ::= MENOR_QUE C_BODY PBODY MAYOR_QUE S9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S6",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // S9 ::= S7 CIERRE C_BODY MAYOR_QUE 
            {
              Object RESULT =null;
		int Pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object P = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarEtiqueta("/C_BODY",Pleft,Pright,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S9",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // S9 ::= error MAYOR_QUE S7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S9",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // S9 ::= error TEXTO_ETIQUETA MAYOR_QUE S7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S9",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // S7 ::= S7 MENOR_QUE S8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S7",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // S7 ::= MENOR_QUE S8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S7",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // S8 ::= C_SPAM P_SELECT_P_H1_SPAMS MAYOR_QUE OPCION_TEXTO CIERRE C_SPAM MAYOR_QUE 
            {
              Object RESULT =null;
		int Pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object P = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
			agregarEtiqueta("C_SPAM",Pleft,Pright,A.toString());
			//System.out.println("Etiqueta spam deberia agregar");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S8",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // S8 ::= C_INPUT PINPUTS MAYOR_QUE CIERRE C_INPUT MAYOR_QUE 
            {
              Object RESULT =null;
		int Pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object P = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
					
			agregarEtiqueta("C_INPUT",Pleft,Pright,null);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S8",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // S8 ::= C_TEXTAREA PTEXTEAREAS MAYOR_QUE OPCION_TEXTO CIERRE C_TEXTAREA MAYOR_QUE 
            {
              Object RESULT =null;
		int Pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object P = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
			System.out.println("Texto area deberia reconocer");
			agregarEtiqueta("C_TEXTAREA",Pleft,Pright,A.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S8",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // S8 ::= S14 S9 CIERRE C_SELECT MAYOR_QUE 
            {
              Object RESULT =null;
		int Pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object P = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
			agregarEtiqueta("/C_SELECT",Pleft,Pright,null);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S8",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // S8 ::= S11 S7 CIERRE C_DIV MAYOR_QUE 
            {
              Object RESULT =null;
		int Pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object P = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
			//System.out.println("		fin div");
			agregarEtiqueta("/C_DIV",Pleft,Pright,null);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S8",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // S8 ::= C_IMG PIMGS MAYOR_QUE 
            {
              Object RESULT =null;
		int Pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object P = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			agregarEtiqueta("C_IMG",Pleft,Pright,null);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S8",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // S8 ::= C_BR MAYOR_QUE 
            {
              Object RESULT =null;
		int Pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object P = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			agregarEtiqueta("C_BR",Pleft,Pright,null);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S8",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // S8 ::= C_BUTTON PBUTTONS MAYOR_QUE OPCION_TEXTO CIERRE C_BUTTON MAYOR_QUE 
            {
              Object RESULT =null;
		int Pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object P = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
			agregarEtiqueta("C_BUTTON",Pleft,Pright,A.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S8",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // S8 ::= C_H1 P_SELECT_P_H1_SPAMS MAYOR_QUE OPCION_TEXTO CIERRE C_H1 MAYOR_QUE 
            {
              Object RESULT =null;
		int Pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object P = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
			agregarEtiqueta("C_H1",Pleft,Pright,A.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S8",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // S8 ::= C_P P_SELECT_P_H1_SPAMS MAYOR_QUE TEXTO_ETIQUETA CIERRE C_P MAYOR_QUE 
            {
              Object RESULT =null;
		int Pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object P = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
			agregarEtiqueta("C_P",Pleft,Pright,A.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S8",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // S8 ::= C_SCRIPTING MAYOR_QUE S15 CIERRE C_SCRIPTING MAYOR_QUE 
            {
              Object RESULT =null;
		int Pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object P = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
			agregarEtiqueta("C_SCRIPTING",Pleft,Pright,null);
			existeOnload = false;
			manejadorEtiquetas.manejadorScript().resetBloque();
			agregarEtiqueta("/C_SCRIPTING",Pleft,Pright,null);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S8",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // S8 ::= error S7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S8",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // S8 ::= error MAYOR_QUE S7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S8",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // S8 ::= error CORCHETE_CERRADO MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S8",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OPCION_TEXTO ::= 
            {
              Object RESULT =null;
		RESULT="";System.out.println("Texto area deberia reconocer nada");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCION_TEXTO",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OPCION_TEXTO ::= TEXTO_ETIQUETA 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=A;System.out.println("Texto area deberia reconocer "+A);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCION_TEXTO",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // S14 ::= C_SELECT P_SELECT_P_H1_SPAMS MAYOR_QUE 
            {
              Object RESULT =null;
		int Pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object P = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
		agregarEtiqueta("C_SELECT",Pleft,Pright,null);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S14",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // S9 ::= S9 S10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S9",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // S9 ::= S10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S9",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // S10 ::= MENOR_QUE C_OPTION MAYOR_QUE TEXTO_ETIQUETA MENOR_QUE DIAGONAL C_OPTION MAYOR_QUE 
            {
              Object RESULT =null;
		int Pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object P = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
		agregarEtiqueta("C_OPTION",Pleft,Pright,A.toString());
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S10",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // S11 ::= C_DIV PDIVS MAYOR_QUE 
            {
              Object RESULT =null;
		int Pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object P = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
		//System.out.println("		Inicio div");
		agregarEtiqueta("C_DIV",Pleft,Pright,null);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S11",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CIERRE ::= MENOR_QUE DIAGONAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CIERRE",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NT$0 ::= 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

			if(!existeOnload){
				manejadorEtiquetas.manejadorScript().setNombreProcedimiento("ON_LOAD");		
				manejadorEtiquetas.manejadorScript().agregarLinea("ON_LOAD"+contadorOnload,"INICIO_FUNCION",null,null,null);
				existeOnload = true;
				contadorOnload++;
			}else{
				manejadorEtiquetas.agregarError("Semantico", "Proceso ON_LOAD ya existe en bloque", new int [] {Aleft,Aright});
			}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // S24 ::= ON_LOAD PARENTESIS_ABIERTO PARENTESIS_CERRADO NT$0 CORCHETE_ABIERTO S16 CORCHETE_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
			manejadorEtiquetas.manejadorScript().agregarLinea(null,"FIN_FUNCION",null,null,null);
			manejadorEtiquetas.manejadorScript().resetLocales();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S24",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // S15 ::= S25 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S15",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // S15 ::= S15 S25 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S15",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // S15 ::= error CORCHETE_ABIERTO S16 CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S15",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // S15 ::= error PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S15",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$1 ::= 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

		if(manejadorEtiquetas.manejadorScript().agregoNombreFuncion(A.toString())){
			manejadorEtiquetas.manejadorScript().setNombreProcedimiento(A.toString());
			manejadorEtiquetas.manejadorScript().agregarLinea(A.toString(),"INICIO_FUNCION",null,null,null);
		}else{
			int posXY [] = {Aleft,Aright};
			manejadorEtiquetas.agregarError("Semantico", "Id de funcion ya existe "+A.toString(), posXY);
		}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // S25 ::= NOMBRE_FUNCION PARENTESIS_ABIERTO PARENTESIS_CERRADO NT$1 CORCHETE_ABIERTO S16 CORCHETE_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
			manejadorEtiquetas.manejadorScript().agregarLinea(null,"FIN_FUNCION",null,null,null);
			manejadorEtiquetas.manejadorScript().resetLocales();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S25",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // S25 ::= S24 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S25",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // S25 ::= error CORCHETE_CERRADO S15 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S25",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // S16 ::= S17 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S16",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // S16 ::= S16 S17 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S16",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // S16 ::= error PUNTO_COMA S16 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S16",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // S16 ::= INICIO_BLOQUE error FIN_BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S16",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // S16 ::= error IGUAL S23 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S16",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // S17 ::= ASIGNACIONES_DECLARACIONES PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S17",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // S17 ::= OPCIONES_IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S17",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // S17 ::= WHILE_PROD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S17",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // S17 ::= REPEAT_PROD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S17",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // S17 ::= EXIT_PROD PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S17",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // S17 ::= REDIRECT_PROD PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S17",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // S17 ::= ALERT_INFO_PROD PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S17",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // S17 ::= INSERT PARENTESIS_ABIERTO OPCIONES_INSERT PARENTESIS_CERRADO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S17",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // OPCIONES_INSERT ::= OPCION_INSERT COMA OPCIONES_INSERT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES_INSERT",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // OPCIONES_INSERT ::= OPCION_INSERT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES_INSERT",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // OPCION_INSERT ::= ID_PARAMETRO_INSERT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCION_INSERT",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // OPCION_INSERT ::= ID_VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCION_INSERT",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // EXIT_PROD ::= EXIT PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		
		manejadorEtiquetas.manejadorScript().agregarLinea(null,"EXIT",null,null,null);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXIT_PROD",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // REDIRECT_PROD ::= REDIRECT PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		
		manejadorEtiquetas.manejadorScript().agregarLinea(null,"REDIRECT",null,null,null);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REDIRECT_PROD",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ALERT_INFO_PROD ::= ALERT_INFO PARENTESIS_ABIERTO S23 PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		if(A.getTipo().equals("STRING")){
			String valor = getValor(A);
			manejadorEtiquetas.manejadorScript().agregarLinea(null,"ALERT_INFO",null, valor,null);
		}else{
			manejadorEtiquetas.agregarError("Semantico","Funcion REVERSE solo recibe parametros",new int[]{Aleft,Aright});
		}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALERT_INFO_PROD",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // OPCIONES_IF ::= INICIO_IF OPCIONES_BLOQUE 
            {
              Object RESULT =null;
		
				manejadorEtiquetas.manejadorScript().agregarLinea(null,"FIN_IF",null,null,null);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES_IF",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // NT$2 ::= 
            {
              Object RESULT =null;

			manejadorEtiquetas.manejadorScript().agregarLinea(null,"FIN_IF",null,null,null);
			manejadorEtiquetas.manejadorScript().agregarLinea(null,"INICIO_ELSE",null,null,null);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // OPCIONES_IF ::= INICIO_IF OPCIONES_BLOQUE ELSE NT$2 OPCIONES_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			manejadorEtiquetas.manejadorScript().agregarLinea(null,"FIN_ELSE",null,null,null);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES_IF",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // INICIO_IF ::= IF PARENTESIS_ABIERTO S23 PARENTESIS_CERRADO THEN 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
		if(A!=null && A.getTipo().equals("BOOLEAN")){
			manejadorEtiquetas.manejadorScript().agregarLinea(null,"INICIO_IF",A.getValor(),null,null);
		}else{
			if(!errorSintactco)manejadorEtiquetas.agregarError("Semantico","No se puede hacer condicion "+A.getTipo()+" en un if, su valor "+A.getValor(),new int[]{Aleft,Aright});
			//else manejadorEtiquetas.agregarError("Semantico","Error irrecuperable en if",new int[]{Aleft+1,Aright});
		}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO_IF",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // NT$3 ::= 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

	if(!errorSintactco){
			if(A!=null && A.getTipo().equals("BOOLEAN")){
			manejadorEtiquetas.manejadorScript().agregarLinea(null,"INICIO_WHILE",A.getValor(),null,null);
			}else{
				if(A!=null)manejadorEtiquetas.agregarError("Semantico","No se puede hacer condicion "+A.getTipo()+" en un while, su valor "+A.getValor(),new int[]{Aleft+1,Aright});
				else manejadorEtiquetas.agregarError("Semantico","No se puede hacer condicion  en un while",new int[]{Aleft+1,Aright});
			}
	}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // WHILE_PROD ::= WHILE PARENTESIS_ABIERTO S23 PARENTESIS_CERRADO NT$3 THENWHILE OPCIONES_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
			manejadorEtiquetas.manejadorScript().agregarLinea(null,"FIN_WHILE",null,null,null);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE_PROD",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // NT$4 ::= 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String[] A = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lexema B = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

	if(!errorSintactco){
		if(A!=null && B!=null){
			if((A[0].equals("INTEGER")||A[0].equals("DECIMAL"))&&(B.getTipo().equals("DECIMAL")||B.getTipo().equals("INTEGER"))){
				if(A[1]!=null){
					manejadorEtiquetas.manejadorScript().agregarLinea(A[2],"INICIO_REPEAT",B.getValor(),A[1],null);
				}else{
					manejadorEtiquetas.agregarError("Semantico","Se debe inicalizar una variable al ingresar a un repeat",new int[]{Aleft,Aright});
				}
			}else{				
				manejadorEtiquetas.agregarError("Semantico","Operacion no valida en un for solo se acepta expresion tipo integer",new int[]{Aleft,Aright});
			}
		}else {
			manejadorEtiquetas.agregarError("Semantico","Error en asignacion|declaracion en REPEAT variable debe inicalizarse ",new int[]{Aleft,Aright});
		}
	}else{
			//manejadorEtiquetas.agregarError("Semantico","Error en irrecuperable en  REPEAT  ",new int[]{Aleft,Aright});
		}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // REPEAT_PROD ::= REPEAT PARENTESIS_ABIERTO ASIGNACIONES_DECLARACIONES PARENTESIS_CERRADO HUNTIL PARENTESIS_ABIERTO S23 PARENTESIS_CERRADO NT$4 OPCIONES_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String[] A = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Lexema B = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
	manejadorEtiquetas.manejadorScript().agregarLinea(null,"FIN_REPEAT",null,null,null);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REPEAT_PROD",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // OPCIONES_BLOQUE ::= ASIGNACIONES_DECLARACIONES PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES_BLOQUE",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // OPCIONES_BLOQUE ::= EXIT_PROD PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES_BLOQUE",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // OPCIONES_BLOQUE ::= REDIRECT_PROD PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES_BLOQUE",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // OPCIONES_BLOQUE ::= ALERT_INFO_PROD PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES_BLOQUE",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // OPCIONES_BLOQUE ::= INICIO_BLOQUE S16 FIN_BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES_BLOQUE",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // OPCIONES_BLOQUE ::= error LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES_BLOQUE",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // OPCIONES_BLOQUE ::= error DOS_PUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES_BLOQUE",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // OPCIONES_BLOQUE ::= error END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES_BLOQUE",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // OPCIONES_BLOQUE ::= error LLAVE_ABIERTA DOS_PUNTOS S16 DOS_PUNTOS LLAVE_CERRADA END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES_BLOQUE",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // INICIO_BLOQUE ::= INIT LLAVE_ABIERTA DOS_PUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO_BLOQUE",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // FIN_BLOQUE ::= DOS_PUNTOS LLAVE_CERRADA END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIN_BLOQUE",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // ASIGNACIONES_DECLARACIONES ::= ASIGNACION 
            {
              String[] RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String[] A = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(A!=null)RESULT = A;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES_DECLARACIONES",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // ASIGNACIONES_DECLARACIONES ::= DECLARACION 
            {
              String[] RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String[] A = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(A!=null)RESULT = A;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES_DECLARACIONES",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // ASIGNACIONES_DECLARACIONES ::= error PUNTO_COMA 
            {
              String[] RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES_DECLARACIONES",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // DECLARACION ::= S18 
            {
              String[] RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String[] A = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = A;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // ASIGNACION ::= ID_VARIABLE IGUAL S23 
            {
              String[] RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lexema B = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if(!errorSintactco){
			Lexema aux = manejadorEtiquetas.manejadorScript().getLexema(A.toString());
			if(aux!=null){
				if(B!=null && B.getValor()!=null){
					if(B.getTipo().equals(aux.getTipo())){
						//System.out.println("Seteo variable "+A.toString());
						aux.setValor(B.getValor());
						String id2 = aux.getNombreVariable();
						if(id2 == null)id2 = A.toString();
						//agregarLinea(String tipo,String condicion,String inicio,String modo)
						String valor = B.getNombreVariable();
						if(valor == null) valor = B.getValor();
						manejadorEtiquetas.manejadorScript().agregarLinea(id2,"ASIGNACION",null,valor,null);
						RESULT = new String [] {B.getTipo(),B.getValor(),A.toString()};
					}else{
						manejadorEtiquetas.agregarError("Semantico","No se puede asignar un "+B.getTipo()+" a un "+aux.getTipo(),new int[]{Aleft,Aright});
					}
				}else{
					manejadorEtiquetas.agregarError("Semantico","Error en la parte asignada",new int[]{Aleft,Aright});
				}
			}else{
				manejadorEtiquetas.agregarError("Semantico","Variable "+A.toString()+" No existe",new int[]{Aleft,Aright});
			}
	}else {
		RESULT = new String [] {null,"sin operacion por error ","sin operacion por error"};
	}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // ASIGNACION ::= IGUAL error CORCHETE_CERRADO S15 
            {
              String[] RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // S18 ::= TIPOS_DATOS S19 S20 S22 
            {
              String[] RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
				
	if(!errorSintactco){
		if(!manejadorEtiquetas.manejadorScript().errorOperacion()){
			String errorAux = manejadorEtiquetas.manejadorScript().errorVariableGlobal(B.toString());
			if(errorAux!=null){
				manejadorEtiquetas.agregarError("Semantico","Variable(S): "+errorAux+" globales ya existen",new int[]{Aleft,Aright});
			}
			if(D.toString().equals("NO")){
				//System.out.println("Variable(S) sin asignacion");
				manejadorEtiquetas.manejadorScript().agregarVariables(A.toString(),B.toString(),lexemaAux,manejadorEtiquetas.getErrores(),new int[]{Aleft+1,Aright+1});
				if(lexemaAux!=null)RESULT = new String [] {lexemaAux.getTipo(),null,C.toString()};
			}else{
				if(lexemaAux!=null){
				String tipoOperacion = lexemaAux.getTipo();
				// da el valor de la variable  manejadorEtiquetas.manejadorScript().getOperacion();
				//System.out.println("Variable(S) con asignacion");
				//System.out.println("El tipo de dato que subio es "+tipoOperacion);				
				//System.out.println("Va a comparar "+tipoOperacion+" con "+A.toString());				
				if(A.toString().equals(tipoOperacion)){
					manejadorEtiquetas.manejadorScript().agregarVariables(A.toString(),B.toString(),lexemaAux,manejadorEtiquetas.getErrores(),new int[]{Aleft+1,Aright+1});
					if(lexemaAux!=null)RESULT = new String [] {lexemaAux.getTipo(),lexemaAux.getValor(),C.toString()};
				}else{
					//System.out.println("Error en asignacion de variable no coinciden los datos "+A.toString()+" "+tipoOperacion);
					String aus = "Error en asignacion de variable no coinciden los datos "+A.toString()+" "+tipoOperacion;					
					manejadorEtiquetas.agregarError("Semantico",aus,new int[]{Aleft,Aright});
				}
				}
			}			
			//System.out.println("tipo variable :"+A.toString()+" global: "+B.toString()+"  id(s) ");
		}else{
			//System.out.println("Error en asignacion de variable");
		}
		manejadorEtiquetas.manejadorScript().resetOperacion();
		lexemaAux = null;
	}else {
		RESULT = new String [] {null,"sin operacion por error ","sin operacion por error"};
	}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S18",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // S19 ::= 
            {
              Object RESULT =null;
		RESULT="NO";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S19",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // S19 ::= GLOBAL 
            {
              Object RESULT =null;
		RESULT = "SI";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S19",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // S20 ::= S21 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!errorSintactco)RESULT = A.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S20",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // S20 ::= S20 COMA S21 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!errorSintactco)RESULT = A.toString()+","+B.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S20",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // S20 ::= error PUNTO_COMA S16 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S20",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // S21 ::= ID_VARIABLE 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(!manejadorEtiquetas.manejadorScript().agregarID(A.toString())&&!errorSintactco){
			manejadorEtiquetas.agregarError("Semantico","Ya existe variable con ese Id "+A.toString(),new int[]{Aleft,Aright});
		}
		RESULT = A.toString();	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S21",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // S22 ::= 
            {
              Object RESULT =null;
		RESULT = "NO";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S22",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // S22 ::= IGUAL S23 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "SI";lexemaAux = A;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S22",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // S23 ::= S23 SUMA S23 
            {
              Lexema RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lexema B = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			verificadorOperaciones(A,"+",B,Aleft,Aright);
			RESULT = manejadorEtiquetas.manejadorScript().convertirALexema();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S23",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // S23 ::= S23 RESTA S23 
            {
              Lexema RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lexema B = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			verificadorOperaciones(A,"-",B,Aleft,Aright);
			RESULT = manejadorEtiquetas.manejadorScript().convertirALexema();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S23",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // S23 ::= S23 OPCION_RESTA 
            {
              Lexema RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lexema B = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			B = new Lexema(B.getValor().replaceAll("-", ""),B.getTipo());
			verificadorOperaciones(A,"-",B,Aleft,Aright);
			RESULT = manejadorEtiquetas.manejadorScript().convertirALexema();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S23",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // S23 ::= S23 MULTIPLICACION S23 
            {
              Lexema RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lexema B = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			verificadorOperaciones(A,"*",B,Aleft,Aright);
			RESULT = manejadorEtiquetas.manejadorScript().convertirALexema();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S23",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // S23 ::= S23 DIAGONAL S23 
            {
              Lexema RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lexema B = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			verificadorOperaciones(A,"/",B,Aleft,Aright);
			RESULT = manejadorEtiquetas.manejadorScript().convertirALexema();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S23",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // S23 ::= S23 OPERADOR_Y S23 
            {
              Lexema RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lexema B = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			verificadorOperaciones(A,"&&",B,Aleft,Aright);
			RESULT = manejadorEtiquetas.manejadorScript().convertirALexema();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S23",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // S23 ::= S23 OPERADOR_O S23 
            {
              Lexema RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lexema B = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			verificadorOperaciones(A,"||",B,Aleft,Aright);
			RESULT = manejadorEtiquetas.manejadorScript().convertirALexema();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S23",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // S23 ::= NOT S23 
            {
              Lexema RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lexema B = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			verificadorOperaciones("!",B,Bleft,Bright);
			RESULT = manejadorEtiquetas.manejadorScript().convertirALexema();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S23",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // S23 ::= S23 IGUAL_IGUAL S23 
            {
              Lexema RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lexema B = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
				
			verificadorOperaciones(A,"==",B,Aleft,Aright);			
			RESULT = manejadorEtiquetas.manejadorScript().convertirALexema();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S23",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // S23 ::= S23 DIFERENTE S23 
            {
              Lexema RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lexema B = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			verificadorOperaciones(A,"!=",B,Aleft,Aright);
			RESULT = manejadorEtiquetas.manejadorScript().convertirALexema();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S23",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // S23 ::= S23 MAYOR_IGUAL S23 
            {
              Lexema RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lexema B = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			verificadorOperaciones(A,">=",B,Aleft,Aright);
			RESULT = manejadorEtiquetas.manejadorScript().convertirALexema();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S23",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // S23 ::= S23 MENOR_IGUAL S23 
            {
              Lexema RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lexema B = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			verificadorOperaciones(A,"<=",B,Aleft,Aright);
			RESULT = manejadorEtiquetas.manejadorScript().convertirALexema();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S23",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // S23 ::= S23 MENOR_QUE S23 
            {
              Lexema RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lexema B = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			verificadorOperaciones(A,"<",B,Aleft,Aright);
			RESULT = manejadorEtiquetas.manejadorScript().convertirALexema();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S23",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // S23 ::= S23 MAYOR_QUE S23 
            {
              Lexema RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lexema B = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			verificadorOperaciones(A,">",B,Aleft,Aright);
			RESULT = manejadorEtiquetas.manejadorScript().convertirALexema();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S23",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // S23 ::= PARENTESIS_ABIERTO S23 PARENTESIS_CERRADO 
            {
              Lexema RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			if(A!=null)RESULT = new Lexema("("+A.getValor()+")",A.getTipo());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S23",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // S23 ::= PARENTESIS_ABIERTO error PARENTESIS_CERRADO 
            {
              Lexema RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S23",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // S23 ::= S26 
            {
              Lexema RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			//System.out.println("Entro a S22 (valor,tipo): "+A.getTipo()+" "+A.getValor());
			RESULT = A;			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S23",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // OPCION_RESTA ::= DECIMAL_NEGATIVO 
            {
              Lexema RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = A;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCION_RESTA",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // OPCION_RESTA ::= INTEGER_NEGATIVO 
            {
              Lexema RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = A;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCION_RESTA",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // S26 ::= DECIMAL_POSITIVO 
            {
              Lexema RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = A;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S26",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // S26 ::= DECIMAL_NEGATIVO 
            {
              Lexema RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = A;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S26",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // S26 ::= INTEGER_POSITIVO 
            {
              Lexema RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = A;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S26",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // S26 ::= INTEGER_NEGATIVO 
            {
              Lexema RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = A;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S26",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // S26 ::= STRING_PARAMETRO 
            {
              Lexema RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = new Lexema("\""+A.getValor()+"\"",A.getTipo());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S26",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // S26 ::= CARACTER 
            {
              Lexema RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = new Lexema("\'"+A.getValor()+"\'",A.getTipo());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S26",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // S26 ::= BOOLEAN 
            {
              Lexema RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = A;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S26",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // S26 ::= ID_VARIABLE 
            {
              Lexema RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(!errorSintactco){
			Lexema aux = manejadorEtiquetas.manejadorScript().getLexema(A.toString());			
			if (aux == null){
				manejadorEtiquetas.agregarError("Semantico","Variable "+A.toString()+" No existe",new int[]{Aleft,Aright});
			}else{				
				if(aux.getValor() == null){
					manejadorEtiquetas.agregarError("Semantico","Variable "+A.toString()+" No inicializada",new int[]{Aleft,Aright});
				}
			}
			RESULT = aux;
		}else{
			RESULT = null;
		}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S26",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // S26 ::= ASC PARENTESIS_ABIERTO S23 PARENTESIS_CERRADO 
            {
              Lexema RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				if(A.getTipo().equals("STRING")){					
					RESULT = new Lexema("ASC("+getValor(A)+")",A.getTipo());
				}else{
					manejadorEtiquetas.agregarError("Semantico","Funcion ASC solo recibe parametros tipo string",new int[]{Aleft,Aright});
				}

			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S26",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // S26 ::= DESC PARENTESIS_ABIERTO S23 PARENTESIS_CERRADO 
            {
              Lexema RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				if(A.getTipo().equals("STRING")){
					RESULT = new Lexema("DESC("+getValor(A)+")",A.getTipo());
				}else{
					manejadorEtiquetas.agregarError("Semantico","Funcion DESC solo recibe parametros tipo string",new int[]{Aleft,Aright});
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S26",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // S26 ::= LETPAR_NUM PARENTESIS_ABIERTO S23 PARENTESIS_CERRADO 
            {
              Lexema RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				if(A.getTipo().equals("STRING")){
					RESULT = new Lexema("LETPAR_NUM("+getValor(A)+")",A.getTipo());
				}else{
					manejadorEtiquetas.agregarError("Semantico","Funcion LETPAR_NUM solo recibe parametros tipo string",new int[]{Aleft,Aright});
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S26",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // S26 ::= LETIMPAR_NUM PARENTESIS_ABIERTO S23 PARENTESIS_CERRADO 
            {
              Lexema RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				if(A.getTipo().equals("STRING")){
					RESULT = new Lexema("LETIMPAR_NUM("+getValor(A)+")",A.getTipo());
				}else{
					manejadorEtiquetas.agregarError("Semantico","Funcion LETIMPAR_NUM solo recibe parametros tipo string",new int[]{Aleft,Aright});
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S26",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // S26 ::= REVERSE PARENTESIS_ABIERTO S23 PARENTESIS_CERRADO 
            {
              Lexema RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lexema A = (Lexema)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				if(A.getTipo().equals("STRING")){
					RESULT = new Lexema("REVERSE("+getValor(A)+")",A.getTipo());
				}else{
					manejadorEtiquetas.agregarError("Semantico","Funcion REVERSE solo recibe parametros tpos string",new int[]{Aleft,Aright});
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S26",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // S26 ::= CARACTER_ALEATORIO PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Lexema RESULT =null;
		
				RESULT = new Lexema("CARACTER_ALEATORIO(1)","CHAR");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S26",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // S26 ::= NUM_ALEATORIO PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Lexema RESULT =null;
		
				RESULT = new Lexema("NUM_ALEATORIO()","INTEGER");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S26",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // S26 ::= GET_ELEMENT_BY_ID PARENTESIS_ABIERTO ID_PARAMETRO_ELEMENT PARENTESIS_CERRADO 
            {
              Lexema RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
										
				if(!ids.contains(A)){
					RESULT = new Lexema("document.getElementById(\""+A.trim()+"\").value","STRING");
				}else{					
					manejadorEtiquetas.agregarError("Semantico","No existe etiqueta con este id: "+A,new int[]{Aleft,Aright});
					RESULT = null;
				}			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S26",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
